{"/academy/transaction-tracking":{"title":"Tracking TON Transactions: From Message to Trace","data":{"":"Alright — let’s break down how the hell you’re supposed to track a transaction in TON. If you’ve ever used Ethereum or Bitcoin, you might think: “Yeah, I just grab the hash of the transaction and I’m good.” Well, surprise: TON doesn’t work that way. Not even close.If you don’t clearly get what an account, transaction, message, trace, cell, or cell-hash is — or what the wallet actually signs — buckle up and read the glossary.\nAccount – Basic unit of information storage in the blockchain; a record in the workchain state containing metadata, balance, and possibly code and data. \nMessages – Data packets exchanged between accounts (internal) or between accounts and entities outside the blockchain (external-in or external-out). \nTransactions – Atomic changes to an account’s state. Typically (excluding system transactions), they're reactions to incoming messages. The exact validator processing time can't be predetermined, thus neither the timestamp nor hash can be known in advance. \n(Transactions can shoot out internal messages, which go to other accounts, triggering more transactions, and so on – it’s like digital dominoes.)\nTrace – It’s a tree. Nodes = transactions. Edges = messages. The root? Usually a response to an external-in.\nWant examples? Go check tonviewer.com – some are simple, others branch out beautifully, and some are just degenerate one-offs.\nCell – The atomic unit in TON. Up to 1023 bits and up to 4 refs to other cells. Everything lives in cells – accounts, messages, transactions, even blocks. And each cell has its own hash. That hash is how you track stuff.\nHash – Anytime you see \"hash\" here, it means the hash of the cell. Don't try to hash the raw bytes like a savage. It won’t work.\nSimple Example\nYou send your buddy 5 TON using Tonkeeper.\nBehind the scenes, your wallet puts together an instruction for your account contract, which then runs something like this:\nMake sure the instruction isn't too old (check the TTL).\nCheck that the sequence number (seqno) is one higher than the last one.\nVerify the signature against the public key stored in the account.\nTake the draft of the outgoing internal message (the 5 TON transfer) from the external message body, fill in the actual sender info, and send it out.\nThis whole thing – the instruction and signature – goes into the body of the external-in message. But here’s the weird part: the message headers (like the recipient address) aren’t signed at all. They just specify which account should receive the message, and off it goes to the blockchain.In decoded form, it looks something like this:\nOnce it lands, two transactions and two messages are recorded on-chain. The external-in message from the wallet triggers the sender’s transaction, which emits an internal message. That internal message reaches the recipient and triggers their transaction.","what-has-a-unique-id-and-what-doesnt#What Has a Unique ID and What Doesn’t?":"Account – It’s globally unique. Workchain + 256-bit address. Easy.\nTransaction – Unique per account and lt. So AccountID + lt = unique. And that’s in the body, so the hash is globally unique too.\nMessages (internal + external-out) – Even in the same transaction, they'll have different lt. That plus source account = unique hash.\n(Tiny exception: some weird old system messages might break this. Don’t worry about it unless you’re working at the protocol level.)\nExternal-in – This one's a bit tricky. A single external-in message can end up creating multiple transactions – for example, if the wallet didn't set the +2 flag and the account doesn't have enough funds. In such cases, the message will keep being retried until the TTL expires or the account runs out of money. So by default, external-in messages are not globally unique.\nBUT – if you’re using a standard wallet contract (like v3r1–v5r1) and sets the correct flags (which most popular wallets do), then the message body + sender address combination becomes unique. That means the message hash is globally unique and can be used as an ID right after signing – even before the blockchain sees it.\nTrace – Usually tracked by the root transaction hash. Explorers like tonviewer.com will let you find a trace from any globally unique message or transaction hash.","the-tldr#The TL;DR":"Only one identifier exists before the validator touches anything: the hash of the external-in message.\nBut there are a few things you need to understand and account for:\nThe wallet contract that sends the transaction must behave correctly.\nThis only works for wallets that support seqno and ttl – older or non-standard contracts won't do.\nOnly the message body is signed – the rest (headers like destination) is not. So relayers or other middleware might change those parts before the message gets into the blockchain, changing the final hash. That’s why normalization is needed.\nYou can’t query a message by its hash using a light server – they don’t index that. You’ll need a full blockchain index (like tonapi.io, toncenter.com, or dton.io), or some duct-tape hacks.","how-external-in-normalization-works#How External-in Normalization Works":"Because relayers can modify parts of a message before it hits the chain, we normalize the message to get a stable, predictable hash. Here's how it works:\nExtract the original message from the cell.\nKeep only two things: the destination address and the message body.\nRepack the message with the body stored as a reference – this guarantees a consistent structure.\nStore it in a new, empty cell and compute the hash.\nfunction normalizeHash(message: Message): Buffer {\n    if (message.info.type !== 'external-in') {\n        return message.body.hash();\n    }\n    const cell = beginCell()\n        .storeUint(2, 2)    // external-in\n        .storeUint(0, 2)    // addr_none\n        .storeAddress(message.info.dest)\n        .storeUint(0, 4)    // import_fee = 0\n        .storeBit(false)    // no StateInit\n        .storeBit(true)     // store body as reference\n        .storeRef(message.body)\n        .endCell();\n    return cell.hash();\n}\n// Original code: https://github.com/tonkeeper/tonapi-js/blob/4786b2e6bd42c8a3b116e6d234dde7c16cb8426b/examples/track-transaction.ts#L15\n// Hash returns a hash of this Message.\n// it's strongly recommended to normalize hash\nfunc (m *Message) Hash(normalizeExternal bool) Bits256 {\n    if !normalizeExternal || m.Info.SumType != \"ExtInMsgInfo\" {\n        return m.hash\n    }\n    // normalize ExtIn message\n    c := boc.NewCell()\n    _ = c.WriteUint(2, 2) // message$_ -> info:CommonMsgInfo -> ext_in_msg_info$10\n    _ = c.WriteUint(0, 2) // message$_ -> info:CommonMsgInfo -> src:MsgAddressExt -> addr_none$00\n    m.Info.ExtInMsgInfo.Dest.AddrStd.Anycast.Exists = false\n    _ = m.Info.ExtInMsgInfo.Dest.MarshalTLB(c, nil) // message$_ -> info:CommonMsgInfo -> dest:MsgAddressInt\n    _ = c.WriteUint(0, 4)                           // message$_ -> info:CommonMsgInfo -> import_fee:Grams -> 0\n    _ = c.WriteBit(false)                           // message$_ -> init:(Maybe (Either StateInit ^StateInit)) -> nothing$0\n    _ = c.WriteBit(true)                            // message$_ -> body:(Either X ^X) -> right$1\n    body := boc.Cell(m.Body.Value)\n    _ = c.AddRef(body.CopyRemaining())\n    hash, _ := c.Hash256()\n    return hash\n}\n// Original code:  https://github.com/tonkeeper/tongo/blob/5c0ce694d72b7024bcb62b3d0dcd008940a75419/tlb/messages.go#L27\nFor a more detailed, step-by-step example of tracking a transaction using normalized hashes, check out the Cookbook.","if-youre-building-a-dapp#If You’re Building a dApp":"When the user sends a message through TonConnect, you receive a BOC (Bag of Cells) — an encoded copy of the sent message. Normalize it, calculate the hash, and boom – you can show an explorer link right away or track what happens next.This BOC contains everything you need to get the exact same normalized hash, even before the message appears on-chain. See how to decode and handle BOC strings in the Cookbook.","if-youre-building-something-else#If You’re Building Something Else":"You should probably go read the full article: original here [ru]. It’s got all the gritty, boring details we skipped here."}},"/academy/sign-data":{"title":"SignData in TON via TonConnect: A Developer Guide","data":{"":"When it comes to critical actions, a simple button press just doesn’t cut it. Real consent feels like your wallet standing tall and declaring: \"Yes, it’s me! And I approve this!\"A signature is the real deal: cryptographic, verifiable, secure. You can sign anything — text, bytes, or cells. The signature can be verified off-chain in your dApp or passed into a smart contract for on-chain logic. \nThe signData method is implemented in the TonConnect fork by Tonkeeper and is ready for use. You can experiment with data signing in the demo dApp. The feature will soon be merged into the main TonConnect repository.","what-is-signdata-and-why-it-matters#What is SignData and Why It Matters":"Any action where the user must consciously and explicitly confirm their intent – like updating public profile information, linking a new email or phone number, or accepting DAO terms – deserves something more robust than just a click.SignData lets your dApp request a cryptographic signature – from the user's wallet – on arbitrary content. The user sees exactly what they are signing and can either approve or decline. The signature is generated using the same private key that signs TON transactions, but it provides no direct access to funds.For a dApp, this signature is a way to secure critical actions, verify a user's real intent, and – if needed – pass validated data into a smart contract for on-chain use.If you don’t clearly get what an Cell, TL-B, or public key is? Read the glossary below\nTonConnect  –  The protocol connecting your dApp to the user's wallet. It handles connections, transaction requests, and data signing. \nSignData  –  A TonConnect method that allows a dApp to request the user to sign arbitrary data (text, bytes, or Cell) with their wallet. No transaction involved – just a signature.\nCell  –  The atomic unit of data in TON. Holds up to 1023 bits and 4 references to other cells. Everything in TON – accounts, messages, blocks – is made of Cells. Each Cell has a hash that acts as its unique ID.\nTL-B schema  –  Declarative definition of Cell structure. It’s required for wallets to display signing details and for smart contracts to validate the content.\nEd25519  –  The signing algorithm used in TON. It powers both transactions and signData. Everything signed by the user uses Ed25519 over a SHA256 hash of a strictly formatted message.\nAddress  –  The account address in TON. Formed by a workchain (usually 0) and a hash of the contract’s code and initialization data. For standard wallets, this hash is deterministically derived from the public key.\nPublic Key  –  The public part of the user’s key pair, derived from the private key. Used to verify signatures. In TON, the public key becomes available on-chain only after the wallet is initialized (i.e., has sent at least one transaction). Until then, it’s known only to the dApp via TonConnect and the user.","choosing-the-right-format#Choosing the Right Format":"","1-text#1. Text":"Use this when the data is human-readable.Pros:\nThe user sees exactly what they are signing.\nSimple to implement.\nPerfect for off-chain confirmations.\nExample:\n{\n  type: 'text',\n  text: 'I confirm deletion of my account and all associated data.'\n}","2-binary#2. Binary":"Use this when signing a hash, arbitrary bytes, or a file.Pros:\nUseful for generating digital receipts, hashed content references, etc.\nWorks when the content isn’t human-readable or shouldn't be shown.\nExample:\n{\n  type: 'binary',\n  bytes: '1Z/SGh+3HFMKlVHSkN91DpcCzT4C5jzHT3sA/24C5A=='\n}","3-cell#3. Cell":"Use this if the signed data should be verifiable and restorable inside a smart contract.Pros:\nSmart contracts can validate the signature during execution.\nSupports structured data via TL-B schemas.\nExample:\n{\n  type: 'cell',\n  schema: 'message#_ text:string = Message;',\n  cell: 'te6ccgEBAQEAVwAAqg+KfqVUbeTvKqB4h0AcnDgIAZucsOi6TLrf...'\n}","how-to-request-a-signature-via-tonconnect#How to Request a Signature via TonConnect":"const result = await tonConnectUi.signData({\n  type: 'text',\n  text: 'I confirm this action.',\n});\nTonConnect handles the request and shows the prompt in the user’s wallet. They either sign or decline.You receive:\n{\n  signature: 'base64-ed25519-signature',\n  address: 'EQD...',\n  timestamp: 1710000000,\n  domain: 'your-app.com',\n  payload: {\n    type: 'text',\n    text: 'I confirm this action.'\n  }\n}","how-the-signature-is-built#How the Signature Is Built":"","for-text-and-binary#For text and binary":"The message is constructed:\n0xffff ++ \"ton-connect/sign-data/\" ++ Address ++ AppDomain ++ Timestamp ++ Payload\nComponents:\nAddress: wallet address (workchain + hash)\nAppDomain: dApp domain as UTF-8 string with length\nTimestamp: time of signing\nPayload:\nPrefix txt / bin\nLength\nText (utf-8 encoded) or bytes\nThen:\nEd25519.sign(sha256(message), privateKey)","for-cell#For cell":"A Cell is built:\nbeginCell()\n  .storeUint(0x75569022, 32)\n  .storeUint(crc32(schema), 32)\n  .storeUint(timestamp, 64)\n  .storeAddress(userWalletAddress)\n  .storeStringRefTail(appDomain)\n  .storeRef(cell)\nThe hash of this Cell is signed:\nEd25519.sign(payload.hash(), privateKey)\n🔥 Example signing in JS: https://github.com/mois-ilya/ton-sign-data-reference","how-to-verify-the-signature#How to Verify the Signature":"","in-javascript-off-chain#In JavaScript (off-chain)":"For text and binary, you can reconstruct the message:\nimport nacl from 'tweetnacl';\nRebuild the byte array exactly as described above.\nRetrieve the public key (from TonConnect or known in advance).\nVerify:\nconst isValid = await nacl.sign.detached.verify(hash, signature, publicKey);\nImportant: Always ensure that result.address matches the wallet you requested the signature from. Otherwise, an attacker could swap in a valid signature from a different wallet.\n🔥 Example verification in JS: https://github.com/mois-ilya/ton-sign-data-reference","in-a-smart-contract-on-chain#In a Smart Contract (on-chain)":"For the cell format, smart contracts can verify the signature directly.They must validate:\nPrefix: 0x75569022\nSchema hash matches\nTimestamp is recent\nAddress matches\nApp domain matches\nSignature is valid using ed25519\n📄  check_signature in standard library\n🔥 On-chain example in FunC: https://github.com/p0lunin/sign-data-contract-verify-example","tldr#TL;DR":"The SignData method in TonConnect is a secure way for a dApp to request a user’s cryptographic signature on text, bytes, or TON cells – directly through their wallet. It’s not a transaction, but a confirmation that can be verified off-chain or on-chain.\nUsers see what they sign (if it's text or a proper TL-B schema).\nSignature uses the same key as for transactions, but doesn’t send anything.\nVerification works anywhere – on your backend or inside a smart contract.\nFormat\tWhat’s Signed\tWallet UI\tUse Case\ttext\tHuman-readable message\tDisplayed as-is\tAction confirmation, agreements\tbinary\tBytes / hashes / identifiers\tShows warning\tDocument hashes, TX IDs\tcell\tCell with TL-B schema\tSchema + warning or content\tSmart contract validation\t\nIf you’re building a dApp that needs real user consent and want to verify it without extra hassle – SignData gets the job done.","useful-links#Useful Links":"TonConnect fork with signData support\ngithub.com/tonkeeper/tonconnect-sdk (includes links to corresponding npm packages)\nDemo dApp to test signData\ntonkeeper.github.io/demo-dapp-with-wallet\nJS signature verification example\ngithub.com/mois-ilya/ton-sign-data-reference\nSmart contract verification example\ngithub.com/p0lunin/sign-data-contract-verify-example\nTonkeeper’s SignData spec\ngithub.com/tonkeeper/ton-connect-docs – SignData\nFunC check_signature standard lib\ndocs.ton.org – check_signature"}},"/payment-processing":{"title":"Payment Processing","data":{"":"Our payment processing solutions for the TON network are designed to meet a variety of needs, offering customizable options to suit specific requirements. These solutions are built to handle high payment volumes, making them suitable even for CEX-scale products, and are already trusted by CEXes and other clients.\nDisclaimer\nThe solutions' availability or use may be subject to local regulatory requirements. The users are responsible for ensuring their own compliance with applicable laws.\nThe solutions are technology-based and do not constitute regulated payment services, e-money issuance, or cryptoasset exchange services .\nThe offered solutions  do not take  custody of user funds or private keys.","key-features-by-processing-approach#Key Features by Processing Approach":"","asset-types#Asset Types":"TON\nJettons","deployment-and-maintenance#Deployment and Maintenance":"Self-hosted solutions for full control over sensitive data and risk mitigation.\nAccess to auxiliary services, such as liteservers, ensures reliability and stability.","interaction-with-blockchain#Interaction with Blockchain":"Monitoring and indexing of payment-related transactions without private key storage.\nMessage assembly and signing by a trusted party (optional).\nFull-fledged payment processor for both monitoring and performing transfers.","payment-acceptance-methods#Payment Acceptance Methods":"Payments to one or a few contracts (wallets) with a memo.\nPayments to individual deposit addresses for each user (no memo required).","interaction-interfaces#Interaction Interfaces":"REST API\nCustomizable or newly developed interfaces based on customer requirements.","source-code-options#Source Code Options":"Closed-source solutions\nOpen-source solutions with our support.","trust-level-in-blockchain-interaction#Trust Level in Blockchain Interaction":"We use the liteapi interface, provided by liteservers, to connect offchain services with the TON blockchain. To ensure trust and prevent data falsification by liteservers, our solutions include proof-check mechanisms, supporting trustless communication with both public and private liteservers.","tonapi-embed-solution#TonAPI Embed Solution":"Demo API in testnet\nDocumentation page","feedback-and-customer-needs#Feedback and Customer Needs":"Share your feedback via Google Forms.","contact-us#Contact Us":"Email:   \nTelegram: Rostislav Rudakov"}},"/":{"title":"Welcome to Documentation","data":{"":"Find the technical documentation and guides for Ton API, Ton Console, Tonkeeper and more. Launch projects, use network, enhance your business in the ecosystem of TON blockchain.","value-proposal#Value proposal":"Tonconsole — B2B platform for developers and product managers. Create new features, manage your business on TON, use TON API.\nTonviewer — observe transactions on TON blockchain.\nTonkeeper — B2C app with 12b+ MAU and dapp browser. Get the traffic for your products.","additional-services#Additional services":"Jettons whitelist"}},"/payment-processing/tonapi-embed":{"title":"TonAPI Embed","data":{"":"A service for indexing blockchain data related to the transfers of funds (TON and Jettons).\nDesigned for self-hosted use and integration into the infrastructure of CEX and services that process deposits and withdrawals on the TON blockchain.\nThe service requires a connection to one or more nodes of the TON network.","demo-instance#Demo instance":"https://demo-embed.tonapi.io/","glossary#Glossary":"Message - A message is a packet of data sent between actors (users, applications, smart contracts) on TON blockchain. https://docs.ton.org/develop/smart-contracts/guidelines/message-delivery-guarantees\nJetton - fungible token on the TON blockchain.\nWallet smart contract - specialized smart contract designed specifically for wallet apps and to be used by end users.\nDeposit address - address in TON blockchain to which funds can be received and from which funds can be withdrawn.\nDeposit smart contract - a smart contract on the TON blockchain that can hold the balance of some asset (TON or Jetton). It is usually (but not always) a Wallet smart contract. The address of the recipient is not always the same as the address of the smart contract where the asset is actually stored. For example, for Jettons, the recipient address is the smart contract address of the Jetton wallet owner.\nTransaction - low-level entity in the TON network. A transaction is an operation that processes inbound and can create outbound messages related to a specific account, altering its state and potentially generating fees for validators. https://docs.ton.org/develop/data-formats/transaction-layout\nTransfer - abstract entity describing the movement of funds between Deposit smart contracts. Contains information about the sender, recipient, amount, etc. This information can be derived from several low-level entities in the TON blockchain, such as Messages and Transactions.\nCentralized deposit address - a Deposit address to receive funds from many users. Usually requires the use of a memo to accept payments to this address.\nIndividual deposit address - a Deposit address to receive funds from one user. The use of a memo is not required.\nWithdrawal - the action of sending funds from one Deposit smart contract to another by sending a Message to the TON blockchain.\nLiteserver Node - a node in the TON network that provides an API for external services to interact with TON.\nArchive Node - Liteserver Node that stores historical blockchain data**.**\nPrivate key - Wallet smart contract private key or seed phrase for signing withdrawal Message. One private key can manage several wallets.\nTEP74 - standard for fungible tokens in the TON blockchain. https://github.com/ton-blockchain/TEPs/blob/master/text/0074-jettons-standard.md\nLT (logical time) - blockchain specific and account specific counter to organize messages and transactions monotonically increases (but contains gaps) for any given account (https://docs.ton.org/develop/smart-contracts/guidelines/message-delivery-g)\nJetton address (Jetton master contract address) - for better scaling, the Jetton contract (master contract) in the TON blockchain does not store information about the users' balance, but only general information about the token itself. User balance information is stored by a separate smart wallet token contract. Which in our case is considered a deposit.\nWhen we talk about a particular Jetton in general, we identify it by the address of the master contract. https://docs.ton.org/develop/dapps/asset-processing/jettons#jetton-architecture\nFee - fee charged in TON by the TON network when processing a transaction. It has a complex structure and depends on a large number of factors. In this regard, it is difficult to predict the exact size of the commission and to calculate the sum value. https://docs.ton.org/develop/smart-contracts/fees\nMinimum indivisible units - a measure of the quantity of TON or Jettons in which the quantity is always an integer. For a TON, it is nanoTON. The position of the decimal point when converting an amount of Minimum indivisible units is determined by the decimals Jetton parameter.\nMasterchain block - Block of Masterchain. The Masterchain is the primary chain that stores the network configuration and the final state of all workchains. You can understand this as the masterchain being the core directory, a single source of truth for all the shards in the ecosystem. This block is selected as a synchronization point to refer to a specific smart contract state.","description-of-the-current-service-functionality#Description of the current service functionality":"The service is designed to track deposits and withdrawals at one or several Centralized deposit addresses for TON and Jettons.\nThe API structure, composition and format of returned data can be changed upon customer's request.\nThe service requires access to one or more Liteserver Nodes/Archive Nodes (not necessarily trusted ones, since the service has proof check).\nThe service provides a REST API with a set of methods to track the movement of funds on a given pool of Deposit addresses.\nService scans Transfers until the moment of Deposit smart contract creation, therefore, when scanning Deposit smart contract with a long history you will need access to the Archive node.\nSpecific service performance and health metrics can be added on request.","api-methods#API methods":"You can get Swagger file here: Swagger file \nYou can use Swagger UI to explore the API methods: Swagger UI","get-transfers-history#GET Transfers history":"GET /account/{address}/history \nGET /jetton/{jetton}/{address}/historyMethods for obtaining the Transfer history (with pagination) for a specific Deposit address.Returns the following data:\nAddress of sender and recipients\nJetton address\nAmount of transferred TON and Jettons in Minimum indivisible units of measurement\nUnix timestamp\nLT (logical time)\nHash of Transaction (as a unique identifier for this transfer)\nText comment from the Message (if any)\nFee","get-transfer-by-hash#GET Transfer by Hash":"GET /account/{address}/history/{hash} \nGET /jetton/{jetton}/{address}/history/{hash}Methods for obtaining a specific Transfer by Transaction hash.","get-balance#GET Balance":"GET /account/{address} \nGET /jetton/{jetton}/{address}Methods for obtaining the Deposit smart contract balance (TON or Jetton) for the last Masterchain block known to the service.The last known Masterchain block depends on the synchronization of the node with the TON blockchain.Returns the following data:\nBalance in Minimum indivisible units of measurement\nMasterchain block seqno\nLast LT - identifies the last known Transaction on the Deposit smart contract\nLast processed transaction LT - identifies the last processed Transaction on the Deposit smart contract, which is included in the Transfer history","add-tracking-address#Add tracking Address":"POST /account/{address} \nPOST /jetton/{jetton}/{address}Methods to add a new Deposit address for tracking. Since a Jetton Wallet in the TON blockchain is a separate smart contract, when adding a Jetton Deposit smart contract to tracking, the owner of this wallet (also a smart contract) is added to the tracking as a TON Deposit smart contract. The owner of the Jetton wallet pays fees for Jetton withdrawals.","resolve-domain#Resolve domain":"GET /resolve/{domain}Method for resolving domain names on the TON blockchain (presented as NFT), such as wallet.ton. Does not work for any domain name, but for a name that has a corresponding DNS record. Returns the address of the contract specified in the DNS record.","status#Status":"GET  /statusA method for obtaining the current service health and lag when indexing data from the chain.","methods-for-withdrawals#Methods for withdrawals":"Methods for constructing and controlling withdrawals are added upon request based on customer requirements."}},"/tonapi/api-v2":{"title":"This page was moved","data":{"":"Please visit REST API section for the latest documentation"}},"/tonapi/cookbook":{"title":"Cookbook","data":{"ton-transfer#TON Transfer":"This recipe provides an example of sending TON using a mnemonic for signing. It covers deriving a wallet key, constructing a transaction, signing it, and broadcasting it to the blockchain.","jetton-transfer#Jetton Transfer":"This recipe provides an example of sending Jettons using a mnemonic for signing. It covers deriving a wallet key, constructing a Jetton transfer transaction, signing it, and broadcasting it to the blockchain.","transaction-tracking#Transaction Tracking":"To reliably find a transaction from an external message (external-in) in the TON blockchain, use a normalized hash instead of a regular hash. External messages may slightly alter metadata when included in the blockchain, causing regular hashes to fail in locating the transaction.Swagger documentation for Blockchain operations can be found here.\nUse this method to reliably track, verify, or monitor transactions based on external messages.","getting-the-message-object#Getting the Message object":"","from-a-boc#From a BOC":"You may encounter BOC strings from various sources, for example, TonConnect (specifically after methods like sendTransaction or send), or from your own transaction logs. Here's how to parse a BOC string into a Message object:","manual-creation-with-toncore#Manual creation with ton/core":"To manually create a Message, follow these steps:\nUse this method to reliably track, verify, or monitor transactions based on external messages.","emulation#Emulation":"Originating from the Emulation section of the REST API documentation, this recipe provides implementation examples for emulating transactions in TypeScript. Developers can use these examples to integrate emulation into their applications.Swagger documentation for Emulation operations can be found here.","gasless-transfer#Gasless Transfer":"Originating from the Gasless section of the REST API documentation, this recipe provides implementation examples for gasless transactions in TypeScript, Go and Python. Developers can use these examples to integrate gasless transactions into their applications.\nGasless transactions are currently not supported through TonConnect.\nSwagger documentation for Gasless operations can be found here."}},"/tonapi/dapp":{"title":"dApp","data":{"":"This section provides resources for building dApps with TONAPI, enabling seamless interaction with the TON blockchain.","guides#Guides":"Building a TON dApp – Learn how to develop a dApp using TONAPI.\nFree TONAPI limits – Get higher API limits for free in your dApps."}},"/tonapi/dapp/free-limits":{"title":"Using free high TONAPI limits in your dApp with Tonkeeper","data":{"overview#Overview":"TONAPI is already available for free, but with a default rate limit of 1 request per second (1 RPS). If your dApp requires higher limits, you can take advantage of Tonkeeper's built-in mechanism to gain additional API capacity at no extra cost.Tonkeeper introduces a way for dApps to access high TONAPI limits for free. This feature allows dApps running in the Tonkeeper browser or in any browser with the Tonkeeper extension installed to leverage a built-in proxy mechanism that optimizes API requests.","how-it-works#How It Works":"When a dApp is opened inside the Tonkeeper browser or a browser with the Tonkeeper extension, the global window.tonapi object becomes available. If the dApp is using @ton-api/client, it will automatically leverage this object. window.tonapi provides a custom fetch implementation that routes requests through Tonkeeper's internal proxy, sending them on behalf of Tonkeeper's TONAPI provider.","key-benefits#Key Benefits":"Higher rate limits: Requests made via window.tonapi.fetch are processed with higher TONAPI limits.\nNo extra setup: The dApp does not need to modify API calls—just use @ton-api/client as usual.\nWorks in the Tonkeeper browser and in any browser with the Tonkeeper extension installed.","integration-guide#Integration Guide":"","1-ensuring-proper-api-key-usage#1. Ensuring Proper API Key Usage":"Even when using window.tonapi.fetch, you must provide a valid TONAPI key when initializing @ton-api/client. The key can be a free-tier key, but it must be valid.\nimport { TonApiClient } from \"@ton-api/client\";\nconst tonApi = new TonApiClient({\n    apiKey: \"your-valid-tonapi-key\"\n});\nIf window.tonapi is available, @ton-api/client will automatically use window.tonapi.fetch for making requests.","2-restricting-your-dapp-to-free-high-limit#2. Restricting Your dApp to free high limit":"If you want to ensure that your dApp only functions in environments where window.tonapi is available , you can enforce this restriction:\nif (!window.tonapi) {\n    alert(\"This dApp requires Tonkeeper to function properly.\");\n    throw new Error(\"window.tonapi is required\");\n}","summary#Summary":"window.tonapi.fetch allows dApps running in the Tonkeeper browser or a browser with the Tonkeeper extension to use high TONAPI limits.\nYou must provide a valid TONAPI key when initializing @ton-api/client.\nYou can restrict your dApp to work only when window.tonapi is available if you need high RPS.\nFor more details about methods, go to REST API section."}},"/tonapi/graphql":{"title":"GraphQL API Documentation","data":{"":"Our GraphQL service is conveniently accessible via the API endpoint found at https://tonapi.io/v2/graphql. You can perform various queris and mutations utilizing this tier.","graphql-playground#GraphQL Playground":"For a better interactive experience, we have made the GraphQL Playground available for you. Feel free to use this feature at the endpoint https://tonapi.io/v2/graphql/playground to test your queries, mutations and perform real-time queries alongside a schema documentation view.","fetching-data-with-nodejs#Fetching data with Node.js":"Here's an example of how to interact with the given endpoint in a Node.js environment to specifically fetch data for one account:\nconst axios = require('axios');\n// Define the GraphQL query structure\nconst query = `\n  query {\n    allAccounts(first: 1) {\n      nodes {\n        id\n        name\n      }\n    }\n  }\n`;\n// The endpoint where we will be sending our GraphQL request\nconst endpoint = 'https://tonapi.io/v2/graphql';\naxios.post(endpoint, {query})\n  .then(response => {\n    const { data } = response.data;\n    console.log(data);\n  })\n  .catch(error => console.error(error));\nIn this example, we're using the axios library to send a POST request to the specified endpoint.We're requesting the first account using the allAccounts(first: 1) query. This returns only the first account from the list.The fields included in the nodes are arbitrary and you should replace id and name with actual fields from the API.Remember to install the axios package in your Node.js environment using npm:\nnpm install axios","fetching-data-with-graphql-request-library#Fetching data with graphql-request library":"npm install graphql-request\nconst { request } = require('graphql-request');\n// Define the GraphQL query structure\nconst query = `\n  query {\n    allAccounts(first: 1) {\n      nodes {\n        id\n        name\n      }\n    }\n  }\n`;\n// The endpoint where we will be sending our GraphQL request\nconst endpoint = 'https://tonapi.io/v2/graphql';\nrequest(endpoint, query)\n  .then(response => console.log(response))\n  .catch(error => console.error(error));\nIn this example, we're using the request method from the graphql-request library to send a request to the mentioned endpoint.We're requesting for the first account from allAccounts(first: 1). This will return only the first account from the list.Note that the fields inside nodes are just placeholders and you should replace id and name with the actual fields as per your API."}},"/tonapi":{"title":"About","data":{"":"This API is designed to provide users with a simple and streamlined experience, eliminating the complexity of the TON blockchain. For instance, you don't need to worry about supporting all wallet standards, performing verifications, or decoding raw bits and bytes. We aim to streamline the process for you, so you can focus on utilizing the functionality of the API without getting bogged down by technical details.To prevent confusion, some data is hidden. However, if you require raw blockchain data, you can use our http-to-adnl proxy methods to fetch raw data from a light server.","authorization#Authorization":"All methods are available without authentication, but with a rate limit of 1 request per 4 seconds (0.24 rps).To authorize your request, you will need a token, which you can obtain from https://tonconsole.com/. Here is an example of a token: .To pass the token in your request, please add the Authorization HTTP header with the \"Bearer scheme.\" Here is an example:\ncurl \\\n -H 'Authorization: Bearer ' \\\n 'https://tonapi.io/v2/blockchain/masterchain-head'","limits#Limits":"The rate limits for all of your issued tokens are the same and match the plan you have. The rate limits are the same for both the testnet and mainnet (if you're paying for a 10 rps plan, you'll get 10 rps in the testnet and 10 rps in the mainnet).Learn more about tiers and limit on TonConsole","launch-you-own-tonapi-node#launch you own TonAPI node":"There is a separate limited open-source version of TonAPI available at https://github.com/tonkeeper/opentonapi. This version does not require a full blockchain index.Some data that requires full node sync, such as (jettons, NFTs, and full account information), may not be visible through this version of TonAPI, but all of the basic functionality is in place.Opentonapi can also work on private light server nodes as well as public ones."}},"/tonapi/liteservers":{"title":"Liteservers","data":{"":"The service provides access to a Lite API for interaction with a liteserver node.This API is used in applications that require access to low-level blockchain data (transactions, account states, etc.) and\nguarantees the reliability of this data (proof verification).\nFor example: blockchain indexers, payment processors, SDK, etc.A more detailed description of this protocol can be found here.\nThe set of methods provided by the API is described here.","advantages-of-this-service-over-deploying-your-own-node#Advantages of this service over deploying your own node":"It eliminates the need for complex maintenance and updates of the node (especially demanding and costly in the case of an archival node)\nIt reduces the risk of out of sync error\nIt provides access to historical data\nIt offers high availability","connecting-to-the-liteserver#Connecting to the Liteserver":"To connect to the Liteserver, you need to use an application or libraries with a Liteclient function.\nYou need to specify the Server and Public key or download the global.config.json file with the ready-made configuration for connection.You can obtain this data in Tonconsole after selecting a plan.Access to two instances of Liteservers (Server #1 and Server #2) is provided,\nand it is better to specify both for higher fault tolerance (if your software supports it).","rate-limits#Rate limits":"Each plan has its rate limits, which operate on a sliding window algorithm.\nThe window size is 10 seconds. Therefore, with a rate limit of 1 RPS, the maximum number of requests is 10 requests per 10-second period.The maximum RPS for current plans is 50. Check with the t.me/tonrostislav(rostislav.r@tonkeeper.com) for the custom plan.To obtain rate limit data, the service provides an API method:\nTL scheme for liteapi method:\nliteProxy.requestRateLimit#14cb3f0c limit:int per_time:int = liteProxy.RequestRateLimit;\n---functions---\nliteProxy.getRequestRateLimit#f0f83e86 = liteProxy.RequestRateLimit;\nWhere: rate limit = limit / per_time[s]","archive-node-access#Archive node access":"By default, the service provides access to an archival node for obtaining historical data (i.e., data from the first blocks of the blockchain)."}},"/tonapi/rest-api":{"title":"REST API","data":{"":"This section of the documentation covers the TONAPI REST API, which provides access to various services for interacting with the TON blockchain. These services allow you to perform operations on accounts, retrieve blockchain data, utilize advanced features like gasless transactions, and more.To facilitate integration and testing of the REST API, the following resources are available:\nSwagger File: The full Swagger specification is available on GitHub, allowing you to explore the API structure and generate client code in various programming languages.\nSwagger UI: For interactive testing and exploration of the API, use Swagger UI.\nSDKs: To simplify integration, SDKs are provided in multiple programming languages. You can find them in the SDK Documentation section."}},"/tonapi/recipes":{"title":"This page was moved","data":{"":"Please visit the Cookbook section for the latest documentation"}},"/tonapi/sdk":{"title":"TonAPI SDK Guide","data":{"":"TonAPI provides a set of tools and libraries to simplify the integration with the TON blockchain. This guide covers both official and third-party SDKs available for different programming languages, as well as instructions on how to generate an SDK yourself using the provided Swagger specification.","official-sdks#Official SDKs":"We maintain several pre-built SDKs for various programming languages. All of these SDKs are generated from our Swagger files and are optimized for seamless integration into your projects.\nGolang SDK: tonapi-go\nJS/TS Client (dApp free limits, @ton/core compatible): @ton-api/client","ton-adapter-compatible-with-tonton#Ton Adapter (Compatible with @ton/ton)":"The @ton-api/ton-adapter allows you to integrate TonAPI projects that use @ton/ton, enhancing your application with additional blockchain features while maintaining compatibility with @ton/ton.","third-party-sdks#Third-Party SDKs":"These SDKs are maintained by the community and provide additional language support:\nPython SDK: pytonapi on GitHub\nJava SDK: tonapi4j on GitHub","generating-an-sdk-using-the-openapi-generator#Generating an SDK Using the OpenAPI Generator":"If you prefer to generate an SDK yourself, you can do so using the TonAPI OpenAPI specification. Follow these steps:","install-the-openapi-generator-cli-tool#Install the OpenAPI Generator CLI Tool:":"Install the OpenAPI generator globally using npm:\nnpm install @openapitools/openapi-generator-cli -g","generate-the-sdk#Generate the SDK:":"Use the command below to generate the SDK. The example is for Ruby, but you can specify a different language by changing the -g (generator) parameter. If your Swagger file has multiple tags per operation and your language struggles with this, you can add the --openapi-normalizer KEEP_ONLY_FIRST_TAG_IN_OPERATION=true option.\nnpx openapi-generator-cli generate -i https://raw.githubusercontent.com/tonkeeper/opentonapi/master/api/openapi.yml -g ruby -o /path/to/output\nNote: Replace /path/to/output with the actual directory path where you want to generate the SDK.\nIf you encounter issues during client generation for certain languages due to multiple tags being present on a single operation in the Swagger file (which is the case for our Swagger file), you can resolve this by adding the option --openapi-normalizer KEEP_ONLY_FIRST_TAG_IN_OPERATION=true. This option helps handle such cases by keeping only the first tag in operations.\nTo run the OpenAPI generator, you need to have Node.js and npm installed on your system, as well as Java 11 or higher. These are necessary prerequisites to ensure proper execution.Alternatively, if you prefer not to use npm, the OpenAPI Generator can be installed via Docker, Homebrew (for macOS), or by downloading the JAR file. Detailed instructions for these installation methods are available in the OpenAPI Generator Installation Guide."}},"/tonapi/webhooks-api":{"title":"Webhooks API","data":{"":"Webhooks API provides a way to subscribe to events that happen in the TON blockchain.\nThis allows you to build applications that react to events in the blockchain.All methods of Webhooks API require a private API key.\nYou can get a personal API key at https://tonconsole.com/.Webhooks API looks for an API key in two places in the following order:\nIn the Authorization header with the \"Bearer scheme\".\nFor example:\nBearer eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9\nIn the \"token\" parameter of the query string.\nFor example:\nhttps://rt.tonapi.io/webhooks?token=eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9\nWhen a transaction happens on an account, TONAPI sends a POST request to a webhook URL.\nThe request body contains the account's ID, the transaction's hash and LT.\nAn example of a request body:\n{\n  \"account_id\":\"0:\",\n  \"lt\":49739623000001,\n  \"tx_hash\":\"\"\n}","create-webhook#Create webhook":"POST https://rt.tonapi.io/webhooks - the method creates a new webhook, configures its endpoint and returns a webhook ID.\nA webhook ID is used to manage subscriptions to account transactions.A request body:\n{\n  \"endpoint\": \"https://your-server.com/webhook\"\n}\nA response example:\n{\n  \"webhook_id\": 5\n}","list-webhooks#List webhooks":"GET https://rt.tonapi.io/webhooks - the method returns all available webhooks: their IDs and endpoints.\nA response example:\n{\n  \"webhooks\": [\n    { \"id\": 5, \"endpoint\": \"https://your-server.com/webhook\" },\n    { \"id\": 6, \"endpoint\": \"https://your-server.com/another-webhook\" }\n  ]\n}","delete-a-webhook#Delete a webhook":"DELETE https://rt.tonapi.io/webhooks/{webhook_id} - the method deletes a webhook and all its subscriptions.","subscribe-to-account-transactions#Subscribe to account transactions":"POST https://rt.tonapi.io/webhooks/{webhook_id}/account-tx/subscribe - the method takes in a list of account IDs to subscribe to. When a new transaction happens on any of the accounts,\nTONAPI sends a POST request to the webhook URL.A request body:\n  {\"accounts\": [{\"account_id\": \"0:\"}]}","unsubscribe-from-account-transactions#Unsubscribe from account transactions":"POST https://rt.tonapi.io/webhooks/{webhook_id}/account-tx/unsubscribe - the method takes in a list of account IDs to unsubscribe from.A request body:\n  {\"accounts\": [\"0:\"]}","get-a-webhooks-subscriptions#Get a webhook's subscriptions":"GET https://rt.tonapi.io/webhooks/{webhook_id}/account-tx/subscriptions?offset=0&limit=10A response example:\n{\n  \"account_tx_subscriptions\": [\n    {\n        \"account_id\": \"0:\",\n        \"last_delivered_lt\": 2900000001,\n        \"failed_at\": \"<time of failure>\",\n        \"failed_lt\": 2900000000,\n        \"failed_attempts\": 4\n    }\n  ]\n}","subscribe-to-events-about-new-contract-deployments#Subscribe to events about new contract deployments":"POST https://rt.tonapi.io/webhooks/{webhook_id}/subscribe-new-contracts - when a new contract is deployed to the blockchain,\nTONAPI sends a POST request to the webhook URL.","unsubscribe-from-events-about-new-contract-deployments#Unsubscribe from events about new contract deployments":"POST https://rt.tonapi.io/webhooks/{webhook_id}/unsubscribe-new-contracts - stop receiving a webhook notification when a new contract is deployed to the blockchain.","subscribe-to-messages-with-a-specific-opcode-in-a-message-body#Subscribe to messages with a specific opcode in a message body":"POST https://rt.tonapi.io/webhooks/{webhook_id}/subscribe-msg-opcode/0x{opcode} - when a new transaction is happening with a message that contains a specific opcode in its body,\nTONAPI sends a POST request to the webhook URL.","unsubscribe-from-messages-with-a-specific-opcode-in-a-message-body#Unsubscribe from messages with a specific opcode in a message body":"POST https://rt.tonapi.io/webhooks/{webhook_id}/unsubscribe-msg-opcode/0x{opcode} - stop receiving a webhook notification when a new transaction is happening with a message that contains a specific opcode in its body."}},"/tonconsole/analytics/examples":{"title":"Examples","data":{"select-all-wallets-which-own-ambra-jettons-and-whales-club-nfts#Select all wallets which own AMBRA jettons and Whales Club NFTs.":"SELECT human_readable\nFROM blockchain.accounts a\nJOIN (\n    SELECT DISTINCT nft.owner_account_id\n    FROM getmethods.get_nft_data nft\n    JOIN getmethods.get_wallet_data jetton\n      ON jetton.owner_account_id = nft.owner_account_id\n    WHERE nft.collection_account_id = '0:'\n      AND jetton.jetton_account_id = '0:'\n) t ON a.id = t.owner_account_id","tps-per-hour#TPS per hour":"SELECT utime / 3600 * 3600 + 3600, Count(1) / 3600.0\nFROM blockchain.transactions\nWHERE utime > extract(epoch FROM Now() - interval '7 days')::bigint\nGROUP BY utime / 3600\nORDER BY utime / 3600","operations-by-type-for-last-day#Operations by type for last day":"SELECT\n    CASE\n        WHEN m.decoded_operation != '' THEN m.decoded_operation\n        WHEN m.op_code IS NOT NULL THEN 'unknown'\n        ELSE 'SimpleTransfer'\n    END op, count(1)\nFROM blockchain.messages m\nJOIN blockchain.transactions txs ON txs.in_msg = m.id\nWHERE utime > extract(EPOCH FROM now() - interval '1 day')::bigint\nGROUP BY op"}},"/tonconsole/analytics":{"title":"Analytics service","data":{"":"Welcome to our Analytics Service, your ultimate tool for conducting in-depth analysis and queries on the TON Blockchain","building-graph#Building graph":"This service allows you to visualize a graph of connections between different accounts. \nJust enter the list of accounts you are interested in and click the Run button.","query#Query":"Our platform empowers you to compose and send SQL queries directly to a PostgreSQL database that indexes the entire TON Blockchain. This means you have full access to a wealth of data, enabling detailed and insightful analytics.Additionally, we offer a user-friendly interface where you can articulate your needs in simple human language. With the aid of ChatGPT, you can effortlessly convert these natural language inputs into precise SQL queries.Our service is designed to bridge the gap between complex data querying and user accessibility, making powerful blockchain analytics available to everyone.Limitation: Maximum query execution time is limited to 30 minutes. Queries exceeding this duration will be automatically terminated."}},"/tonconsole/invoices":{"title":"TON Payment tracker","data":{"":"The service provides tools for tracking specific transactions in the blockchain. It supports TON and USDT, allowing users to monitor the status of payments and receive updates about transaction changes through webhooks.","getting-started#Getting Started":"To start using the TON Invoicing Service, follow these steps:","step-1-register-on-tonconsole#Step 1: Register on Tonconsole":"Visit TON Console and create an account.","step-2-send-project-id#Step 2: Send Project ID":"Find your Project ID on the project settings page and  share it with Rostislav on Telegram: t.me/tonrostislav.","step-3-verification#Step 3: Verification":"Once your Project ID is verified, you will gain access to the invoicing service.","step-4-register-your-application#Step 4: Register Your Application":"Register your application in the invoicing service via Tonconsole.  Specify the payment recipient's address during registration.","managing-applications#Managing Applications":"Once access is granted:\nAn API token will be created automatically.\nUse the TON Console for UI or API to manage invoices (create, delete, view).\nRegister a webhook on the Overview page to handle invoice status changes.","payment-creation#Payment Creation":"","step-1-user-initiates-payment#Step 1: User Initiates Payment":"A user starts the payment process on your website. The frontend sends a request to your backend to create an invoice.","step-2-create-an-invoice#Step 2: Create an Invoice":"Your backend makes an API request to Tonconsole using the API token.\ncurl -X POST https://tonconsole.com/api/v1/services/invoices/invoice \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_API_TOKEN>' \\\n  -d '{\"amount\": \"1000000\", \"life_time\": 1800, \"currency\": \"USDT\", \"description\": \"Example description\"}'\nParameters:\namount: Amount in nanotons.\nlife_time: Invoice lifetime in seconds.\ncurrency: Currency code (TON or USDT).\ndescription (optional): Service-specific description visible only to you in the Tonconsole interface.","step-3-handle-api-response#Step 3: Handle API Response":"Tonconsole returns a response with the invoice details, including a payment_link. Send this link to your frontend, where it can be used in a \"Pay with Tonkeeper\" button or as a QR code.Response Example:\n{\n  \"id\": \"string\",\n  \"status\": \"pending\",\n  \"amount\": \"string\",\n  \"description\": \"string\",\n  \"date_create\": 1234567890,\n  \"date_expire\": 1234567890,\n  \"payment_link\": \"string\",\n  \"pay_to_address\": \"0:<hash>\"\n}","step-4-monitor-invoice-status#Step 4: Monitor Invoice Status":"Register a webhook to receive updates about invoice status changes. Tonconsole will send a POST request to your webhook whenever the status updates (e.g., from \"pending\" to \"paid\"). This ensures real-time tracking of payments.","webhook-for-updates#Webhook for Updates":"Use a webhook to monitor changes in invoice status. A webhook is a mechanism where Tonconsole sends a POST request to your server whenever an invoice status changes (e.g., from \"pending\" to \"paid\").Here’s how you can handle webhooks on your server:","example-of-webhook-handling-nodejs-with-express#Example of Webhook Handling (Node.js with Express):":"const express = require('express');\nconst app = express();\n// Define the webhook endpoint\napp.post('/tonconsole-webhooks', (req, res) => {\n  try {\n    // Parse and log the incoming webhook payload\n    const webhookPayload = JSON.parse(req.body);\n    console.log('Webhook received:', webhookPayload);\n    // Respond with a success status to acknowledge the webhook\n    res.status(200).send('Webhook received');\n  } catch (error) {\n    console.error('Error processing webhook:', error);\n    res.status(500).send('Internal Server Error');\n  }\n});\n// Start the server\napp.listen(3000, () => {\n  console.log('Webhook server is running on port 3000');\n});","webhook-payload#Webhook Payload:":"Payload type\ninterface Invoice {\n    id: string;\n    status: 'pending' | 'paid' | 'cancelled' | 'expired';\n    amount: string;\n    description?: string;\n    date_create: number;\n    date_expire: number;\n    date_change: number;\n    payment_link: string;\n    pay_to_address: string;\n    paid_by_address?: string;\n    overpayment?: string;\n}\nPayload example\n{\n  \"id\": \"string\",\n  \"status\": \"pending | paid | cancelled | expired\",\n  \"amount\": \"string\",\n  \"description\": \"string\",\n  \"date_create\": 1234567890,\n  \"date_expire\": 1234567890,\n  \"date_change\": 1234567890,\n  \"payment_link\": \"string\",\n  \"pay_to_address\": \"0:<hash>\",\n  \"paid_by_address\": \"0:<hash>\",\n  \"overpayment\": \"string\"\n}","explanation#Explanation:":"/tonconsole-webhooks: Replace this path with your desired endpoint URL.\nWebhook Payload: This is the structure of the data Tonconsole will send to your endpoint whenever an invoice's status changes.\nLogging and Acknowledgement: Always log the payload and respond with a 200 status to indicate successful receipt.\nHere is an example of how this can be implemented on your side.","invoice-management#Invoice Management":"","fetching-invoice-by-id#Fetching Invoice by ID":"Request:\nGET https://tonconsole.com/api/v1/services/invoices/<invoice_id>?api_key=<API_KEY>\nResponse:\n{\n  \"id\": \"string\",\n  \"status\": \"pending | paid | cancelled | expired\",\n  \"amount\": \"string\",\n  \"description\": \"string\",\n  \"date_create\": 1234567890,\n  \"date_expire\": 1234567890,\n  \"date_change\": 1234567890,\n  \"payment_link\": \"string\",\n  \"pay_to_address\": \"0:<hash>\",\n  \"paid_by_address\": \"0:<hash>\",\n  \"overpayment\": \"string\"\n}","authentication#Authentication":"Authenticate using either:\nQuery parameter: api_key=<API_KEY>.\nHeader: Authorization: Bearer <API_KEY>.","important-details#Important Details":"","invoice-lifetime#Invoice Lifetime":"Ensure the invoice life_time is appropriately set.\nWarn users about expiration and block expired payments in your interface.","overpayment#Overpayment":"Overpayment, while uncommon, can occur in specific scenarios. When it happens, Tonconsole will notify you about the overpayment through webhooks or the user interface. The overpayment field in the invoice data reflects the following cases:\nPayments to expired or canceled invoices\nThe overpayment field will equal the full amount paid by the user.\nPayments exceeding the required amount\nThe overpayment field will represent the difference between the amount paid and the invoice's required amount.\nSince Tonconsole focuses solely on tracking transactions and does not process payments directly, handling refunds or adjustments for overpayments will need to be managed on your side. To address such cases, you can use the access credentials to your account holding the funds to implement the necessary refund mechanisms.This approach ensures you retain full control over your funds while Tonconsole provides reliable real-time monitoring and reporting capabilities.","tonconsole-ui-features#Tonconsole UI Features":"Manual Invoice Creation (Use the form to create invoices manually)\nInvoice Management (View and manage invoices in the table)\nStatistics (Analyze invoice data using built-in statistics tools)"}},"/tonconsole/nft/cnft":{"title":"Compressed NFTs (cNFTs)","data":{"":"Compressed NFTs (cNFTs) are a format that allows for the creation of massive collections (up to one billion NFTs) without significant time and $TON costs typically associated with minting. The cNFT format combines two types of storage:\nOn-chain: Data is stored directly on the blockchain, making it visible and accessible to all network participants.\nOff-chain: Data is stored on a secure server (e.g., Amazon), which enables faster and more efficient operations with NFTs since they do not require direct blockchain processing.\nMinting (registering on the blockchain) of a cNFT occurs upon the first interaction with the digital item. At this moment, the cNFT becomes indistinguishable from a regular NFT, as the digital item is added to the blockchain, making it visible and exchangeable. The cost of registering a cNFT on the blockchain is equivalent to the cost of minting a regular NFT, which is a small symbolic fee.For technical implementation details on how to create and manage cNFTs, please refer to:\nCompressed NFT Smart Contract:: This repository provides the smart contract required for working with cNFTs on the TON blockchain and includes all necessary documentation to get started.","cnft-indexing-service#cNFT Indexing Service":"The cNFT Indexing Service allows you to add and index your cNFTs via the Tonconsole interface, making them available through TonAPI without requiring immediate on-chain minting.\nTonconsole Interface: Enables the addition and indexing of cNFTs, making them searchable and accessible across all applications that use TonAPI, including Tonviewer and Tonkeeper, without needing to mint them on-chain until the first interaction.\nFor more information on how to index your cNFTs using Tonconsole, please refer to the relevant documentation and console usage guides."}},"/tonconsole/jettons/mass-sending":{"title":"Mass Jetton Sending","data":{"":"A convenient integrated service for mass sending Jettons to multiple recipients.\nThis service is currently under development and will be available soon\nIf you need this service right now, you can contact us at: \nrostislav.r@tonkeeper.com \nt.me/tonrostislav"}},"/tonapi/streaming-api":{"title":"Streaming API","data":{"":"TonAPI V2 offers real-time updates about events in the blockchain.","authorization#Authorization":"All methods of the Streaming API are available without a private API key,\nbut TonAPI limits a number of concurrent requests in this case.\nYou should consider getting a personal API key at https://tonconsole.com/.\nIt's crucial for any production usage.TonAPI looks for an API key in two places in the following order:\nIn the Authorization header with the \"Bearer scheme\".\nFor example:\nBearer eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9\nIn the \"token\" parameter of the query string.\nFor example:\nhttps://tonapi.io/v2/sse/accounts/transactions?accounts=ALL&token=eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9","server-sent-events#Server-Sent Events":"SSE methods response with text/event-stream Content-Type and communications happen in a text format.\nEach API method sends two types of events: heartbeat and message.\nThe \"heartbeat\" event occurs every 5 seconds when nothing else happens\nand is a signal that everything is OK with an underlying TCP connection.\nThe \"message\" event carries important information and its \"data\" always contains a JSON representation of a message.A golang example of working with SSE method.","real-time-notifications-about-new-blocks#Real-time notifications about new blocks":"API method GET https://tonapi.io/v2/sse/blocks?workchain=<...> sends notifications about new blocks in the given workchain.\nThe workchain parameter is optional and TonAPI will stream blocks from all workchains if it's not provided.A response example:\nevent: message\nid: 1702660194645470966\ndata: {\"workchain\":0,\"shard\":\"8000000000000000\",\"seqno\":40695756,\"root_hash\":\"\",\"file_hash\":\"\"}","real-time-notifications-about-finalized-transactions#Real-time notifications about finalized transactions":"API method GET https://tonapi.io/v2/sse/accounts/transactions?accounts=<list-of-accounts>&operations=<list-of-operations> takes in\na list of account IDs  and an optional list of operations.\nQuery parameter\tDescription\taccounts\tA comma-separated list of account IDs. A special value of \"accounts\" is ALL. TonAPI will stream transactions for all accounts in this case.\toperations\tA comma-separated list of operations, which makes it possible to get transactions based on the first 4 bytes of a message body of an inbound message. Each operation is a string containing either one of the supported names or a hex string representing a message operation opcode which is an unsigned 32-bit integer. A hex string must start with \"0x\" prefix and have exactly 8 hex digits.  An example of \"operations\" is &operations=JettonTransfer,0x0524c7ae,StonfiSwap. The advantage of using hex strings is that it's possible to get transactions for operations that are not yet present on the list.\t\nThen it starts streaming finalized transactions that belong to the given list of accounts.A response example:\nevent: heartbeat\nevent: message\nid: 1682407879253338019\ndata: {\"account_id\":\"-1:\",\"lt\":37121532000003,\"tx_hash\":\"\"}","real-time-notifications-about-traces#Real-time notifications about traces":"A trace in the TON blockchain is a series of transactions caused by one inbound message.\nIt usually consists of multiple transactions on different accounts.\nOnce a trace completes, TonAPI sends the trace's hash and a list of involved accounts to all subscribers who are interested in any of these accounts.API method GET https://tonapi.io/v2/sse/accounts/traces?accounts=<comma-separated-list-of-accounts> takes in\na comma-separated list of account IDs as \"accounts\" query parameter.\nA special value of \"accounts\" is ALL. TonAPI will stream all traces in this case.A response example:\nevent: heartbeat\nevent: message\nid: 1682407879253338019\ndata: {\"accounts\":[\"0:\",\"0:\",\"0:\",\"0:\"],\"hash\":\"\"}","real-time-notifications-about-pending-messages-mempool#Real-time notifications about pending messages (Mempool).":"API method GET 'https://tonapi.io/v2/sse/mempool' immediately starts streaming BOCs of pending inbound messages:\nevent: heartbeat\nevent: message\nid: 1682342934235516717\ndata: {\"boc\":\"te6cc...\"}\n\"boc\" parameter is a serialized instance of a tlb.Message.","subscribe-to-a-list-of-accounts#Subscribe to a list of accounts":"Because a flow of pending messages could be quite high, TonAPI has a way to provide a list of accounts that you are interested in by using \"accounts\" query parameter:GET 'https://tonapi.io/v2/sse/mempool?accounts=comma-separated-list-of-accounts'.In this case,\nTonAPI emulates a message to get a list of involved accounts.\nIf any of them is on the list you provided, TonAPI will send a message to you along with a full list of accounts involved in this trace.\nevent: message\nid: 1682407879253338019\ndata: {\"boc\":\"...\",\"involved_accounts\":[\"0:\",\"0:\"]}","websocket#Websocket":"TonAPI supports a JSON-RPC protocol over a websocket connection. It is available at wss://tonapi.io/v2/websocket.\nSupported methods are:\nsubscribe_block\nsubscribe_account\nsubscribe_trace\nsubscribe_mempool\nA golang example of working with websocket.","subscribe_block-method#\"subscribe_block\" method":"subscribe_block starts streaming new blocks.\nIt is possible to specify a workchain by using \"params\" argument to limit the stream to a specific workchain.A request example:\n {\n   \"id\": 1,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"subscribe_block\",\n   \"params\": [\n     \"workchain=-1\"\n   ]\n }\nA response:\n{\n   \"id\": 1,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"subscribe_block\",\n   \"result\": \"success! you have subscribed to blocks\"\n }\nA notification about a new block looks as follows:\n{\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"block\",\n   \"params\": {\n     \"workchain\": -1,\n     \"shard\": \"8000000000000000\",\n     \"seqno\": 34832412,\n     \"root_hash\": \"\",\n     \"file_hash\": \"\"\n   }\n }","subscribe_account-method#\"subscribe_account\" method":"subscribe_account takes in a list of string items as \"params\" argument and starts streaming finalized transactions.Each string item has one of the following formats:\naccountID - a string representing an account ID. In this case, TonAPI will stream all transactions that belong to the given account.\naccountID;operations=operation1,operation2,...,operationN - a string representing an account ID and a list of operations.\nIn this case, TonAPI will stream transactions that belong to the given account and have one of the given operations.\nAn operation is the first 4 bytes of a message body of an inbound message.An example of \"operations\" is operations=JettonTransfer,0x0524c7ae,StonfiSwap.\nIt is a comma-separated list. Each item is an operation name or a hex string representing a message operation opcode which is an unsigned 32-bit integer.\nA hex string must start with \"0x\" prefix and have exactly 8 hex digits.\nThe advantage of using hex strings is that it's possible to get transactions for operations that are not yet present on the list.A request example:\n{\n  \"id\":1,\n  \"jsonrpc\":\"2.0\",\n  \"method\":\"subscribe_account\",\n  \"params\":[\n    \"-1:\",\n    \"-1:;operations=JettonTransfer,0x0524c7ae\"\n  ]\n}\nA response:\n{\n  \"id\":1,\n  \"jsonrpc\":\"2.0\",\n  \"method\":\"subscribe_account\",\n  \"result\":\"success! 2 new subscriptions created\"\n}\nWhen a transaction is committed to the blockchain, TonAPI will send a short summary about it:\n {\n  \"jsonrpc\":\"2.0\",\n  \"method\":\"account_transaction\",\n  \"params\":{\n    \"account_id\":\"-1:\",\n    \"lt\":37121758000003,\n    \"tx_hash\":\"\"\n  }\n}\nIt is possible to subscribe up to 1000 accounts per a websocket connection.","subscribe_trace-method#\"subscribe_trace\" method":"subscribe_trace takes in a list of account IDs as \"params\" argument\nand starts streaming traces that involve any of the given list of accounts.\nA request example:\n{\n  \"id\":1,\n  \"jsonrpc\":\"2.0\",\n  \"method\":\"subscribe_trace\",\n  \"params\":[\n    \"-1:\",\n    \"-1:\"\n  ]\n}\nA response:\n{\n  \"id\":1,\n  \"jsonrpc\":\"2.0\",\n  \"method\":\"subscribe_trace\",\n  \"result\":\"success! 2 new subscriptions created\"\n}\nWhen a trace completes, TonAPI will send a short summary about it:\n {\n  \"jsonrpc\":\"2.0\",\n  \"method\":\"trace\",\n  \"params\":{\n      \"accounts\":[\n          \"0:\",\n          \"0:\",\n          \"0:\",\n          \"0:\"\n      ],\n      \"hash\":\"\"\n  }\n}\nIt is possible to subscribe up to 1000 accounts per a websocket connection.","subscribe_mempool-method#\"subscribe_mempool\" method":"subscribe_mempool subscribes you to notifications about pending inbound messages.\nA request example:\n{\n  \"id\":1,\n  \"jsonrpc\":\"2.0\",\n  \"method\":\"subscribe_mempool\"\n}\nA response:\n{\n  \"id\":1,\n  \"jsonrpc\":\"2.0\",\n  \"method\":\"subscribe_mempool\",\n  \"result\":\"success! you have subscribed to mempool\"\n}\nAn example of a new-pending-message event:\n{\n  \"jsonrpc\":\"2.0\",\n  \"method\":\"mempool_message\",\n  \"params\":{\n    \"boc\":\"te6ccgEBBAEAtwABRYgBvVXMoxQj+/xNpKaEsESJQivKW01aMcWW4qeUUjKm/+sDeRbPQrPGn3bxzd8JnUNGlQcfA/qoFluFxSiRE4gAAAAAAAAAAAAAAAAAEDABIAAAAAaGVsbG8=\"\n  }\n}\n\"boc\" parameter is a serialized instance of a tlb.Message.","subscribe-to-a-list-of-accounts-1#Subscribe to a list of accounts":"Because a flow of pending messages could be quite high, TonAPI has a way to provide a list of accounts that you are interested in by using \"accounts\" as a parameter:\n{\n  \"id\":1,\n  \"jsonrpc\":\"2.0\",\n  \"method\":\"subscribe_mempool\",\n  \"params\": [\"accounts=comma-separated-list-of-accounts\"]\n}\nPlease notice that the \"params\" argument is an array of strings.In this case,\nTonAPI emulates a message to get a list of involved accounts.\nIf any of them is on the list you provided, TonAPI will send a message to you along with a full list of accounts involved in this trace.\n{\n  \"jsonrpc\":\"2.0\",\n  \"method\":\"mempool_message\",\n  \"params\":{\n    \"boc\":\"...\",\n    \"involved_accounts\":[\"0:\",\"0:\"]\n  }\n}"}},"/tonconsole/analytics/scheme":{"title":"All tables","data":{"raw-blockchain-structures#Raw blockchain structures":"","accounts#accounts":"create table blockchain.accounts (\n\tid text NOT NULL,\n\taddress bytea NOT NULL,\n\tworkchain smallint NOT NULL,\n\tstorage_used_cells numeric DEFAULT 0 NOT NULL,\n\tstorage_used_bits numeric DEFAULT 0 NOT NULL,\n\tstorage_used_public_cells numeric DEFAULT 0 NOT NULL,\n\tlast_paid bigint DEFAULT 0 NOT NULL,\n\tdue_payment bigint,\n\tstorage_last_transaction_lt bigint DEFAULT 0 NOT NULL,\n\tton_balance bigint DEFAULT 0 NOT NULL,\n\textra_balances jsonb,\n\tfrozen_hash bytea,\n\tstatus USER-DEFINED DEFAULT 'unknown'::account_status NOT NULL,\n\taccount_code_id uuid,\n\tdata bytea,\n\tlibrary jsonb,\n\tlast_transaction_hash bytea DEFAULT '\\x'::bytea NOT NULL,\n\tlast_transaction_lt bigint DEFAULT 0 NOT NULL,\n\tfirst_transaction_lt bigint DEFAULT 0 NOT NULL,\n\tlast_mentioned_lt bigint DEFAULT 0 NOT NULL,\n\tlast_state_update_lt bigint DEFAULT 0 NOT NULL,\n\thuman_readable text NOT NULL,\n\tinterfaces ARRAY,\n\tget_method_tables ARRAY\n);","account_code#account_code":"create table blockchain.account_code (\n\tid uuid NOT NULL,\n\tcode bytea NOT NULL,\n\thash bytea NOT NULL,\n\tmethods ARRAY DEFAULT '{}'::integer[] NOT NULL\n);","transactions#transactions":"create table blockchain.transactions (\n\tid bytea NOT NULL,\n\ttrace_id bytea,\n\tblock_fake_uuid uuid NOT NULL,\n\tsuccess boolean NOT NULL,\n\thash bytea NOT NULL,\n\tbalance_change bigint NOT NULL,\n\tend_balance bigint NOT NULL,\n\taccount_id text NOT NULL,\n\tlt bigint NOT NULL,\n\tprev_trans_hash bytea NOT NULL,\n\tprev_trans_lt bigint NOT NULL,\n\tutime integer NOT NULL,\n\torig_status USER-DEFINED NOT NULL,\n\tend_status USER-DEFINED NOT NULL,\n\tin_msg uuid,\n\ttotal_fees bigint NOT NULL,\n\ttotal_fees_extra jsonb,\n\tstate_update_old bytea NOT NULL,\n\tstate_update_new bytea NOT NULL,\n\ttransaction_type USER-DEFINED NOT NULL,\n\tstorage_ph boolean DEFAULT false,\n\tstorage_ph_fees_collected bigint NOT NULL,\n\tstorage_ph_fees_due bigint,\n\tcredit_ph boolean DEFAULT false,\n\tcredit_ph_fees_collected bigint,\n\tcredit_ph_credit bigint,\n\tcredit_ph_credit_extra jsonb,\n\tstorage_ph_status_change USER-DEFINED NOT NULL,\n\tcompute_ph_skip_reason USER-DEFINED,\n\tcompute_ph_mode smallint,\n\tcompute_ph boolean DEFAULT false,\n\tcompute_ph_skipped boolean,\n\tcompute_ph_success boolean,\n\tcompute_ph_msg_state_used boolean,\n\tcompute_ph_account_activated boolean,\n\tcompute_ph_gas_fees bigint DEFAULT 0 NOT NULL,\n\tcompute_ph_gas_limit bigint DEFAULT 0 NOT NULL,\n\tcompute_ph_gas_credit bigint DEFAULT 0 NOT NULL,\n\tcompute_ph_gas_used bigint DEFAULT 0 NOT NULL,\n\tcompute_ph_vm_steps integer DEFAULT 0 NOT NULL,\n\tcompute_ph_exit_code integer,\n\tcompute_ph_exit_arg integer,\n\taction_ph_status_change USER-DEFINED,\n\taction_ph boolean DEFAULT false,\n\taction_ph_success boolean,\n\taction_ph_valid boolean,\n\taction_ph_no_funds boolean,\n\taction_ph_result_code integer,\n\taction_ph_result_arg integer,\n\taction_ph_total_actions integer,\n\taction_ph_spec_actions integer,\n\taction_ph_skipped_actions integer,\n\taction_ph_msgs_created integer,\n\taction_ph_fwd_fees bigint NOT NULL,\n\taction_ph_total_fees bigint NOT NULL,\n\taction_ph_tot_msg_size_cells bigint,\n\taction_ph_tot_msg_size_bits bigint,\n\tbounce USER-DEFINED,\n\tout_msgs_count integer NOT NULL,\n\taborted boolean NOT NULL,\n\tdestroyed boolean NOT NULL,\n\tbounce_ph boolean DEFAULT false,\n\tbounce_msg_size_cells bigint,\n\tbounce_msg_size_bits bigint,\n\tbounce_req_fwd_fees bigint,\n\tbounce_fwd_fees bigint,\n\tbounce_msg_fees bigint,\n\traw_boc bytea NOT NULL\n);","messages#messages":"create table blockchain.messages (\n\tid uuid NOT NULL,\n\tmsg_type USER-DEFINED NOT NULL,\n\tdecoder_ver integer DEFAULT 0 NOT NULL,\n\ttrace_id bytea,\n\tparent_tx_id bytea,\n\top_code bigint,\n\tdecoded_operation text,\n\tdecoded_body jsonb,\n\tinit_interfaces ARRAY,\n\traw_body bytea NOT NULL,\n\tinit jsonb,\n\thash bytea NOT NULL,\n\tsource text,\n\tsource_extern bytea,\n\tdestination text,\n\tdestination_extern bytea,\n\tvalue bigint NOT NULL,\n\tvalue_extra jsonb,\n\tihr_fee bigint NOT NULL,\n\tfwd_fee bigint NOT NULL,\n\timport_fee bigint NOT NULL,\n\tcreated_lt bigint NOT NULL,\n\tcreated_at integer NOT NULL,\n\tihr_disabled boolean NOT NULL,\n\tbounce boolean NOT NULL,\n\tbounced boolean NOT NULL\n);","blocks#blocks":"create table blockchain.blocks (\n\tfake_uuid uuid NOT NULL,\n\tworkchain integer NOT NULL,\n\tseqno integer NOT NULL,\n\tshard bigint NOT NULL,\n\troot_hash bytea NOT NULL,\n\tfile_hash bytea NOT NULL,\n\tglobal_id integer NOT NULL,\n\tvalue_flow_from_prev_blk bigint NOT NULL,\n\tvalue_flow_to_next_blk bigint NOT NULL,\n\tvalue_flow_imported bigint NOT NULL,\n\tvalue_flow_exported bigint NOT NULL,\n\tvalue_flow_fees_collected bigint NOT NULL,\n\tvalue_flow_fees_imported bigint NOT NULL,\n\tvalue_flow_recovered bigint NOT NULL,\n\tvalue_flow_created bigint NOT NULL,\n\tvalue_flow_minted bigint NOT NULL,\n\tvalue_flow_burned bigint NOT NULL,\n\tvalue_flow_from_prev_blk_extra jsonb,\n\tvalue_flow_to_next_blk_extra jsonb,\n\tvalue_flow_imported_extra jsonb,\n\tvalue_flow_exported_extra jsonb,\n\tvalue_flow_fees_collected_extra jsonb,\n\tvalue_flow_fees_imported_extra jsonb,\n\tvalue_flow_recovered_extra jsonb,\n\tvalue_flow_created_extra jsonb,\n\tvalue_flow_minted_extra jsonb,\n\tvalue_flow_burned_extra jsonb,\n\tstart_lt bigint NOT NULL,\n\tend_lt bigint NOT NULL,\n\tversion integer NOT NULL,\n\tgen_utime integer NOT NULL,\n\tvert_seqno integer NOT NULL,\n\tafter_merge boolean NOT NULL,\n\tbefore_split boolean NOT NULL,\n\tafter_split boolean NOT NULL,\n\twant_split boolean NOT NULL,\n\twant_merge boolean NOT NULL,\n\tkey_block boolean NOT NULL,\n\tgen_catchain_seqno integer NOT NULL,\n\tmin_ref_mc_seqno integer NOT NULL,\n\tprev_key_block_seqno integer NOT NULL,\n\tgen_software_version integer,\n\tgen_software_capabilities integer,\n\tmaster_ref uuid,\n\tprev_refs ARRAY NOT NULL,\n\tin_msg_descr_length integer NOT NULL,\n\tout_msg_descr_length integer NOT NULL,\n\trand_seed bytea NOT NULL,\n\tcreated_by bytea NOT NULL,\n\tshards_blocks ARRAY NOT NULL,\n\ttx_quantity smallint NOT NULL\n);","configs#configs":"create table blockchain.configs (\n\tblock_fake_uuid uuid NOT NULL,\n\traw bytea NOT NULL,\n\tconfig jsonb NOT NULL,\n\tbroken_params ARRAY\n);","getmethods-execution-results#Getmethods execution results":"","get_sale_data__getgems#get_sale_data__getgems":"create table getmethods.get_sale_data__getgems (\n\taccount_id text NOT NULL,\n\tmarketplace_account_id text NOT NULL,\n\tnft_account_id text NOT NULL,\n\tnft_owner_account_id text,\n\tmarketplace_fee_account_id text,\n\troyalty_account_id text,\n\tfull_price numeric NOT NULL,\n\tmarketplace_fee bigint NOT NULL,\n\troyalty_amount bigint NOT NULL,\n\tis_complete boolean NOT NULL,\n\tcreated_at bigint NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_validator_controller_data#get_validator_controller_data":"create table getmethods.get_validator_controller_data (\n\taccount_id text NOT NULL,\n\tstate integer NOT NULL,\n\thalted boolean NOT NULL,\n\tapproved boolean NOT NULL,\n\tstake_amount_sent bigint NOT NULL,\n\tstake_at bigint NOT NULL,\n\tsaved_validator_set_hash bytea NOT NULL,\n\tvalidator_set_changes_count integer NOT NULL,\n\tvalidator_set_change_time bigint NOT NULL,\n\tstake_held_for bigint NOT NULL,\n\tborrowed_amount bigint NOT NULL,\n\tborrowing_time bigint NOT NULL,\n\tvalidator text NOT NULL,\n\tpool text NOT NULL,\n\tsudoer text,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_bill_amount#get_bill_amount":"create table getmethods.get_bill_amount (\n\taccount_id text NOT NULL,\n\tamount bigint NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_lockup_data#get_lockup_data":"create table getmethods.get_lockup_data (\n\taccount_id text NOT NULL,\n\tstart_time bigint NOT NULL,\n\ttotal_duration bigint NOT NULL,\n\tunlock_period bigint NOT NULL,\n\tcliff_diration bigint NOT NULL,\n\ttotal_amount bigint NOT NULL,\n\tallow_elector bigint NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_locker_bill_data#get_locker_bill_data":"create table getmethods.get_locker_bill_data (\n\taccount_id text NOT NULL,\n\tlocker_account_id text,\n\ttotal_coins_deposit bigint,\n\tuser_account_id text,\n\tlast_withdraw_time bigint,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_public_key#get_public_key":"create table getmethods.get_public_key (\n\taccount_id text NOT NULL,\n\tpublic_key bytea NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_telemint_token_name#get_telemint_token_name":"create table getmethods.get_telemint_token_name (\n\taccount_id text NOT NULL,\n\tusername text NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","list_votes#list_votes":"create table getmethods.list_votes (\n\taccount_id text NOT NULL,\n\tproposal_hash text NOT NULL,\n\tvote_create_time bigint NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_params__whalesnominator#get_params__whalesnominator":"create table getmethods.get_params__whalesnominator (\n\taccount_id text NOT NULL,\n\tenabled boolean NOT NULL,\n\tupdates_enables boolean NOT NULL,\n\tmin_stake bigint NOT NULL,\n\tdeposit_fee bigint NOT NULL,\n\twithdraw_fee bigint NOT NULL,\n\tpool_fee bigint NOT NULL,\n\treceipt_price bigint NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","is_active#is_active":"create table getmethods.is_active (\n\taccount_id text NOT NULL,\n\tis_active boolean,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_jetton_data#get_jetton_data":"create table getmethods.get_jetton_data (\n\taccount_id text NOT NULL,\n\ttotal_supply numeric NOT NULL,\n\tmintable boolean NOT NULL,\n\tadmin_account_id text,\n\tcontent_layout bigint NOT NULL,\n\tcontent bytea NOT NULL,\n\twallet_code bytea NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_full_domain#get_full_domain":"create table getmethods.get_full_domain (\n\taccount_id text NOT NULL,\n\tdomain text NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_order_data#get_order_data":"create table getmethods.get_order_data (\n\taccount_id text NOT NULL,\n\tmultisig_address text,\n\torder_seqno numeric NOT NULL,\n\tthreshold smallint,\n\tsent_for_execution boolean,\n\tsigners ARRAY,\n\tapprovals_mask bytea,\n\tapprovals_num smallint,\n\texpiration_date bigint,\n\torders ARRAY,\n\tindexer_last_update_lt bigint NOT NULL\n);","dnsresolve#dnsresolve":"create table getmethods.dnsresolve (\n\taccount_id text NOT NULL,\n\trecords jsonb NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_storage_params#get_storage_params":"create table getmethods.get_storage_params (\n\taccount_id text NOT NULL,\n\taccept_new_contracts boolean NOT NULL,\n\trate_per_mb_day bigint NOT NULL,\n\tmax_span bigint NOT NULL,\n\tminimal_file_size bigint NOT NULL,\n\tmaximal_file_size bigint NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_torrent_hash#get_torrent_hash":"create table getmethods.get_torrent_hash (\n\taccount_id text NOT NULL,\n\ttorrent_hash numeric NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_assets__dedust#get_assets__dedust":"create table getmethods.get_assets__dedust (\n\taccount_id text NOT NULL,\n\tasset0_native boolean NOT NULL,\n\tasset_0_account_id text,\n\tasset1_native boolean NOT NULL,\n\tasset_1_account_id text,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_subscription_data#get_subscription_data":"create table getmethods.get_subscription_data (\n\taccount_id text NOT NULL,\n\twallet_account_id text,\n\tbeneficiary_account_id text,\n\tamount bigint NOT NULL,\n\tperiod bigint NOT NULL,\n\tstart_time bigint NOT NULL,\n\ttimeout bigint NOT NULL,\n\tlast_payment_time bigint NOT NULL,\n\tlast_request_time bigint NOT NULL,\n\tfailed_attempts bigint NOT NULL,\n\tsubscription_id bigint NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_pool_data__tf#get_pool_data__tf":"create table getmethods.get_pool_data__tf (\n\taccount_id text NOT NULL,\n\tstate smallint NOT NULL,\n\tnominators_count bigint NOT NULL,\n\tstake_amount_sent bigint NOT NULL,\n\tvalidator_amount bigint NOT NULL,\n\tvalidator_account_id text,\n\tvalidator_reward_share bigint NOT NULL,\n\tmax_nominators_count bigint NOT NULL,\n\tmin_validator_stake bigint NOT NULL,\n\tmin_nominator_stake bigint NOT NULL,\n\tstake_at bigint NOT NULL,\n\tsaved_validator_set_hash bytea NOT NULL,\n\tvalidator_set_changes_count bigint NOT NULL,\n\tvalidator_set_change_time bigint NOT NULL,\n\tstake_held_for bigint NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_wallet_params#get_wallet_params":"create table getmethods.get_wallet_params (\n\taccount_id text NOT NULL,\n\tseqno bigint NOT NULL,\n\tsubwallet bigint NOT NULL,\n\tpublic_key numeric NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_reserves__dedust#get_reserves__dedust":"create table getmethods.get_reserves__dedust (\n\taccount_id text NOT NULL,\n\treserve0 numeric NOT NULL,\n\treserve1 numeric NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","seqno#seqno":"create table getmethods.seqno (\n\taccount_id text NOT NULL,\n\tstate bigint NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_telemint_auction_state#get_telemint_auction_state":"create table getmethods.get_telemint_auction_state (\n\taccount_id text NOT NULL,\n\tbidder_account_id text,\n\tbid bigint NOT NULL,\n\tbid_ts bigint NOT NULL,\n\tmin_bid bigint NOT NULL,\n\tend_time bigint NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_balances__lockup#get_balances__lockup":"create table getmethods.get_balances__lockup (\n\taccount_id text NOT NULL,\n\tton_balance bigint NOT NULL,\n\ttotal_restricted_value bigint NOT NULL,\n\ttotal_locked_value bigint NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_wallet_data#get_wallet_data":"create table getmethods.get_wallet_data (\n\taccount_id text NOT NULL,\n\tbalance numeric NOT NULL,\n\towner_account_id text,\n\tjetton_account_id text NOT NULL,\n\tcode bytea NOT NULL,\n\tverified boolean,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_editor#get_editor":"create table getmethods.get_editor (\n\taccount_id text NOT NULL,\n\teditor_account_id text,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_auction_info#get_auction_info":"create table getmethods.get_auction_info (\n\taccount_id text NOT NULL,\n\tmax_bid_account_id text,\n\tmax_bid_amount bigint NOT NULL,\n\tauctions_end_time bigint NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_nft_api_info#get_nft_api_info":"create table getmethods.get_nft_api_info (\n\taccount_id text NOT NULL,\n\tversion bigint NOT NULL,\n\turi text NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_collection_data#get_collection_data":"create table getmethods.get_collection_data (\n\taccount_id text NOT NULL,\n\towner_account_id text,\n\tcontent_layout bigint NOT NULL,\n\tcollection_content bytea NOT NULL,\n\tnext_item_index bigint NOT NULL,\n\tin_whitelist boolean NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_nft_data#get_nft_data":"create table getmethods.get_nft_data (\n\taccount_id text NOT NULL,\n\towner_account_id text,\n\tcollection_account_id text,\n\tinit boolean NOT NULL,\n\tindex numeric NOT NULL,\n\tcontent_layout bigint NOT NULL,\n\tindividual_content bytea NOT NULL,\n\turl text,\n\tverified boolean,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_members_raw__whalesnominator#get_members_raw__whalesnominator":"create table getmethods.get_members_raw__whalesnominator (\n\taccount_id text NOT NULL,\n\tprofit_per_coin bigint NOT NULL,\n\tmember_account_id text NOT NULL,\n\tbalance bigint NOT NULL,\n\tpending_deposit bigint NOT NULL,\n\tpending_withdraw bigint NOT NULL,\n\tmember_withdraw bigint NOT NULL,\n\tpending_withdraw_all boolean NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","jetton_wallet_lock_data#jetton_wallet_lock_data":"create table getmethods.jetton_wallet_lock_data (\n\taccount_id text NOT NULL,\n\tfull_balance numeric NOT NULL,\n\tindividual_unlock_time bigint NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_telemint_auction_config#get_telemint_auction_config":"create table getmethods.get_telemint_auction_config (\n\taccount_id text NOT NULL,\n\tbeneficiar_account_id text NOT NULL,\n\tinitial_min_bid bigint NOT NULL,\n\tmax_bid bigint NOT NULL,\n\tmin_bid_step bigint NOT NULL,\n\tmin_extend_time bigint NOT NULL,\n\tduration bigint NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_sale_data__basic#get_sale_data__basic":"create table getmethods.get_sale_data__basic (\n\taccount_id text NOT NULL,\n\tmarketplace_account_id text NOT NULL,\n\tnft_account_id text NOT NULL,\n\tnft_owner_account_id text,\n\troyalty_account_id text,\n\tfull_price numeric NOT NULL,\n\tmarketplace_fee bigint NOT NULL,\n\troyalty_amount bigint NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_next_proof_info#get_next_proof_info":"create table getmethods.get_next_proof_info (\n\taccount_id text NOT NULL,\n\tnext_proof bigint NOT NULL,\n\tlast_proof_time bigint NOT NULL,\n\tmax_span bigint NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_pool_data__stonfi#get_pool_data__stonfi":"create table getmethods.get_pool_data__stonfi (\n\taccount_id text NOT NULL,\n\treserve0 numeric NOT NULL,\n\treserve1 numeric NOT NULL,\n\ttoken_0_account_id text NOT NULL,\n\ttoken_1_account_id text NOT NULL,\n\tlp_fee smallint NOT NULL,\n\tprotocol_fee smallint NOT NULL,\n\tref_fee smallint NOT NULL,\n\tprotocol_fee_account_id text NOT NULL,\n\tcollected_token0_protocol_fee numeric NOT NULL,\n\tcollected_token1_protocol_fee numeric NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_asset__dedust#get_asset__dedust":"create table getmethods.get_asset__dedust (\n\taccount_id text NOT NULL,\n\tasset_native boolean NOT NULL,\n\tasset_account_id text,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_plugin_list#get_plugin_list":"create table getmethods.get_plugin_list (\n\twallet_account_id text NOT NULL,\n\tplugin_account_id text NOT NULL,\n\tindexer_last_update_lt bigint\n);","get_last_fill_up_time#get_last_fill_up_time":"create table getmethods.get_last_fill_up_time (\n\taccount_id text NOT NULL,\n\tlast_fill_up_time bigint NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","royalty_params#royalty_params":"create table getmethods.royalty_params (\n\taccount_id text NOT NULL,\n\tnumerator integer NOT NULL,\n\tdenominator integer NOT NULL,\n\tdestination_account_id text NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","list_nominators#list_nominators":"create table getmethods.list_nominators (\n\taccount_id text NOT NULL,\n\tnominator_account_id text NOT NULL,\n\tamount bigint NOT NULL,\n\tpending_deposit_amount bigint NOT NULL,\n\twithdraw_requested boolean NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_sale_data__getgems_auction#get_sale_data__getgems_auction":"create table getmethods.get_sale_data__getgems_auction (\n\taccount_id text NOT NULL,\n\tmarketplace_account_id text NOT NULL,\n\tnft_account_id text NOT NULL,\n\tnft_owner_account_id text,\n\tmarketplace_fee_account_id text,\n\troyalty_account_id text,\n\tlast_member_account_id text,\n\tend boolean NOT NULL,\n\tend_time bigint NOT NULL,\n\tfull_price numeric NOT NULL,\n\tmin_step bigint NOT NULL,\n\tmp_fee_factor bigint NOT NULL,\n\tmp_fee_base bigint NOT NULL,\n\troyalty_fee_factor bigint NOT NULL,\n\troyalty_fee_base bigint NOT NULL,\n\tmax_bid bigint NOT NULL,\n\tmin_bid bigint NOT NULL,\n\tcreated_at bigint NOT NULL,\n\tlast_bid_at bigint NOT NULL,\n\tis_canceled boolean NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_pool_status#get_pool_status":"create table getmethods.get_pool_status (\n\taccount_id text NOT NULL,\n\tbalance bigint NOT NULL,\n\tbalance_sent bigint NOT NULL,\n\tbalance_pending_deposits bigint NOT NULL,\n\tbalance_pending_withdraw bigint NOT NULL,\n\tbalance_withdraw bigint NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_multisig_data#get_multisig_data":"create table getmethods.get_multisig_data (\n\taccount_id text NOT NULL,\n\tseqno numeric NOT NULL,\n\tthreshold smallint,\n\tsigners ARRAY,\n\tproposers ARRAY,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_storage_contract_data#get_storage_contract_data":"create table getmethods.get_storage_contract_data (\n\taccount_id text NOT NULL,\n\tactive boolean NOT NULL,\n\tbalance bigint NOT NULL,\n\tprovider_account_id text,\n\tmerkle_hash numeric NOT NULL,\n\tfile_size bigint NOT NULL,\n\tnext_proof bigint NOT NULL,\n\trate_per_mb_day bigint NOT NULL,\n\tmax_span bigint NOT NULL,\n\tlast_proof_time bigint NOT NULL,\n\tclient_account_id text,\n\ttorrent_hash numeric NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_staking_status#get_staking_status":"create table getmethods.get_staking_status (\n\taccount_id text NOT NULL,\n\tstake_at bigint NOT NULL,\n\tstake_until bigint NOT NULL,\n\tstake_sent bigint NOT NULL,\n\tquery_sent boolean NOT NULL,\n\tcould_unlock boolean NOT NULL,\n\tlocked boolean NOT NULL,\n\tproxy_stake_lock_final boolean NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_pool_full_data#get_pool_full_data":"create table getmethods.get_pool_full_data (\n\taccount_id text NOT NULL,\n\tstate integer NOT NULL,\n\thalted boolean NOT NULL,\n\ttotal_balance bigint NOT NULL,\n\tinterest_rate integer NOT NULL,\n\toptimistic_deposit_withdrawals bigint NOT NULL,\n\tdeposits_open boolean NOT NULL,\n\tsaved_validator_set_hash bytea NOT NULL,\n\tprev_round_round_id integer NOT NULL,\n\tprev_round_active_borrowers integer NOT NULL,\n\tprev_round_borrowed bigint NOT NULL,\n\tprev_round_expected bigint NOT NULL,\n\tprev_round_retured bigint NOT NULL,\n\tprev_round_profit bigint NOT NULL,\n\tcurrent_round_round_id integer NOT NULL,\n\tcurrent_round_active_borrowers integer NOT NULL,\n\tcurrent_round_borrowed bigint NOT NULL,\n\tcurrent_round_expected bigint NOT NULL,\n\tcurrent_round_retured bigint NOT NULL,\n\tcurrent_round_profit bigint NOT NULL,\n\tmin_loan_per_validator bigint NOT NULL,\n\tmax_loan_per_validator bigint NOT NULL,\n\tgovernance_fee integer NOT NULL,\n\tjetton_minter_account_id text NOT NULL,\n\tsupply bigint NOT NULL,\n\tdeposit_payout_account_id text,\n\trequested_for_deposit bigint NOT NULL,\n\twithdrawal_payout_account_id text,\n\trequested_for_withdrawal bigint NOT NULL,\n\tsudoer_account_id text,\n\tsudoer_set_at integer NOT NULL,\n\tgovernor_account_id text,\n\tinterest_manager_account_id text,\n\thalter_account_id text,\n\tapprover_account_id text,\n\tcontroller_code bytea NOT NULL,\n\tpool_jetton_wallet_code bytea NOT NULL,\n\tpayout_minter_code bytea NOT NULL,\n\tprojected_balance bigint NOT NULL,\n\tprojected_supply bigint NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","get_domain#get_domain":"create table getmethods.get_domain (\n\taccount_id text NOT NULL,\n\tdomain text NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);","metadata#Metadata":"","jettonmasters_metadata#jetton.masters_metadata":"create table jetton.masters_metadata (\n\tjetton_account_id text NOT NULL,\n\tmetadata jsonb NOT NULL,\n\tlast_offchain_meta_refresh timestamp with time zone DEFAULT now(),\n\tindexer_last_update_lt bigint NOT NULL\n);","nfturl_metadata#nft.url_metadata":"create table nft.url_metadata (\n\turl text NOT NULL,\n\tmetadata jsonb NOT NULL,\n\tlast_offchain_meta_refresh_try timestamp with time zone DEFAULT '1970-01-01 00:00:01+00'::timestamp with time zone NOT NULL,\n\tlast_offchain_meta_refresh_success timestamp with time zone DEFAULT '1970-01-01 00:00:01+00'::timestamp with time zone NOT NULL\n);","nftcollections_metadata#nft.collections_metadata":"create table nft.collections_metadata (\n\tcollection_id text NOT NULL,\n\tmetadata jsonb NOT NULL,\n\tlast_offchain_meta_refresh timestamp with time zone DEFAULT '1970-01-01 00:00:01+00'::timestamp with time zone NOT NULL,\n\tindexer_last_update_lt bigint NOT NULL\n);"}},"/tonconsole/jettons/airdrop":{"title":"Jetton Airdrop Technical and Commercial Terms (T&C Terms)","data":{"":"These T&C Terms shall be read in conjunction with the Airdrop Terms of UseService enables a mass token distribution model where the recipient (Recipient) pays a fixed fee in TONs and receives jettons (Jettons).\nThe distribution is carried out to a fixed list of Recipients. In the following, we will refer to the Jetton distribution process as an Airdrop.","how-it-works#How it works":"The Airdrop organizer (Airdrop admin) prepares a file with a fixed list of Recipients (Airdrop file)\nThe Airdrop admin creates a new project in Ton Console and fills in the Airdrop data\nThe Airdrop admin connects their wallet via TON Connect (in Ton Console) and deploys the Airdrop smart contracts\nThe Airdrop admin on their hosting raises a dApp that allows the Recipient to connect their wallet and receive Jettons by paying a fee","airdrop-file-preparation#Airdrop file preparation":"Only the account specified in the Airdrop file can claim Jettons.\nThe Airdrop file must include addresses of the wallets in the TON blockchain supported by the Ton Connect protocol.","file-format-requirements#File format requirements":"CSV format with a comma delimiter\nContain a header in the format: recipient,amount\nJetton amount in minimal indivisible units (example: 1000000 for 1 USDT where decimals=6). Decimals can be found in the Jetton metadata. The value must be positive, and decimal points are not allowed.\nRecipient's wallet addresses in user-friendly or raw format (Address formats) with no duplicates\nFile size up to 10,000,000 records","airdrop-file-example#Airdrop file example":"recipient,amount\n0:,2567953998\n0:,3127429615\n0:,562536354","airdrop-file-hash-verification#Airdrop file hash verification":"After downloading the Airdrop file, verify the sha256 hash of your original file and the hash in the Ton Console.","airdrop-admin#Airdrop admin":"When creating a new Airdrop in Ton Console, you will need to connect your wallet via Ton Connect.\nThe address of this wallet will be recorded as the Airdrop admin`s address for the contracts.\nOnly Airdrop admin will be able to manage the distribution (such as completing the distribution and withdrawing the accumulated profit).\nTo send messages in batches, a wallet capable of sending 255 messages is required. Ton Console requires connecting a W5 wallet only.","jetton-for-distribution#Jetton for distribution":"To create an Airdrop you will need to specify the address of the Jetton master contract (Jetton Architecture) in a user-friendly or raw format.\nFor example: Notcoin address is EQAvlWFDxGF2lXm67y4yzC17wYKD9A0guwPkMs1gOsM__NOT (Tonviewer).If you have created a Jetton not based on the standard smart contract or are sending a Jetton minted by someone else, be cautious.\nCustom smart contract logic may disrupt the distribution process (e.g. the transfer fees may be significantly higher). Use only trusted Jettons.\nBefore starting distributions of new Jettons, be sure to conduct a test run with a small number of Recipients.","claim-fee#Claim Fee":"This is a key Airdrop setting. It determines how much the Recipient will pay for the request of Jettons via a claim message (Claim) in addition to any other fees paid by the Recipient.When a Recipient signs a Claim message via Ton Connect, they pay a Claim fee (Claim fee) in TON for the distribution contract to accept the message.\nIn addition to the Claim fee, the Recipient also pays a blockchain fee for sending this message.Example:\nclaim_fee = 0.15 TON\nblockchain_fee(forward_fee + gas_fee + ...) = ~0.0076 TON\nrecipient_pays = claim_fee + blockchain_fee = 0.15 + ~0.0076 = ~0,1576 TON","fee-sharing#Fee Sharing":"The Claim fee is used to cover blockchain fees incurred during the claim process, and the remainder is sent to special distribution smart contracts.Example of a Claim operation in the testnet: Tonviewer.In the given example, the distributor contract will receive excess (Excess) = 0.1147384 TON.\ndistributor_balance_change is equal to +0.112809142 TON and is slightly less than the Excess due to blockchain fees for the payment of which the Airdrop admin is responsible.\nThe estimate amount could be seen in the Value flow tab of the given Claim operation example.The amount of TONs received by the distributor contract is divided in the following proportion:royalty_receiver_share = royalty_coefficient * excessadmin_share = excess - royalty_receiver_share - blockchain_fee,where the royalty receiver share is the fees of Scalable Data Solutions Inc and admin share is the fees of the Airdrop admin.The blockchain fees shall be paid are charged both at the time of receiving Excess and upon executing any subsequent transactions involving distribution contracts.\nKeep in mind that blockchain fees may vary depending on the Jettons contracts and other factors (e.g. the presence of a deployed Jetton wallet for the Recipient).\nTherefore, the provided proportions of the Excess division is approximate. For more accurate estimates, you can conduct test Airdrop.","dapp-for-recipients-to-claim-jettons#dApp for Recipients to claim Jettons":"Airdrop admin should deploy a dApp on their side (website, landing page) where the Recipient can connect their wallet via Ton Connect and sign a Claim.","reference-application#Reference application":"You can find the reference application here.\nYou can find the source code here: GitHub.To configure the reference application, use the following URL format:\nhttps://tonkeeper.github.io/airdrop-reference-dapp/?airdropId=<ID>\nReplace <ID> with the Airdrop ID from Ton Console.","api-for-dapp-interaction#API for dApp interaction":"Our backend has a method for interacting with the Claim dApp. Through it, the dApp receives the necessary data for the Recipient.When you click the Enable claim button in the Ton Console dashboard, you grant the Recipients access to this method; when you click Disable claim, you close it.GET {host}/v1/airdrop/claim/{address}?id={airdrop_id}Returns (or error):\n{\n  \"claim_message\": {\n    \"mode\": 3,\n    \"address\": \"EQBdywJayJlH1PQDDNr1cX8_wOIFzxLpptbA3m5VxXPGR7wz\",\n    \"state_init\": \"base64string\",\n    \"payload\": \"base64string\",\n    \"amount\": \"150000000\"\n  },\n  \"jetton_amount\": \"58701809\",\n  \"jetton\": \"EQAZG3WSEZCd0qj-4QtCcGtMKDH9OoGD4godKRe65ceQj6Hf\"\n}\nWhere request parameters:\nhost - address of Claim API: https://mainnet-airdrop.tonapi.io\naddress - Recipient address in raw form. Example: 0:\nairdrop_id - unique Airdrop ID from the Airdrop dashboard in Ton Console. Example: fa541433-ceef-4286-a76c-1be7c6198632\nThe dApp should retrieve the address from the wallet connected through Ton Connect.Where response parameters:claim_message - contains the data necessary for forming a message via Ton Connect\nmode - message sending mode (Ton Connect always sends with mode 3)\naddress - destination address of the message in user-friendly format containing the bounce flag\nstate_init - serialized state init cell in base64 format\npayload - serialized body cell in base64 format\namount - amount of TONs attached to the message (Claim Fee)\njetton_amount - Jetton amount in minimal indivisible units (from the Airdrop file)\njetton - address of the Jetton master contract","response-error-codes#Response error codes":"","error-format#Error format":"{\n  \"code\": 2,\n  \"message\": \"locked\"\n}","423-locked#423 (Locked)":"{\"code\":1, \"message\":\"not processed yet\"} - the Airdrop data has not yet been processed. Wait for processing. The error CANNOT appear if the workflow in the Ton Console is followed.\n{\"code\":2, \"message\":\"locked\"} - the error occurs if the Claim is set to Disabled in the Ton Console.\n{\"code\":3, \"message\":\"already claimed\"} - the Recipient has already claimed previously.\n{\"code\":4, \"message\":\"blockchain overload\"} - the blockchain is overloaded. Claim temporarily suspended. Try claiming later.","400-bad-request#400 (Bad request)":"invalid id: <err> - an incorrect Airdrop ID was provided.\ninvalid recipient address: <err> - an incorrect Recipient address was provided.","404-not-found#404 (Not found)":"\"entity not found\" - the specified Recipient address or Airdrop ID was not found.","500-internal-error#500 (Internal error)":"\"internal error\" - some internal server error.","blockchain-load-limitation#Blockchain load limitation":"To smooth blockchain load and ensure stable operation, method /v1/airdrop/claim has specific rate limits.\nIf the blockchain is currently under high load (many messages in the shard queue),\nmethod /v1/airdrop/claim is blocked ({\"code\":4, \"message\":\"blockchain overload\"} 423 error)\nfor some Recipients until the load decreases.\nThis limitation is technically justified, and removing it won't improve the Claim situation for Recipients,\nas their Claims will still be delayed.","example-call-claim-function-from-dapp#Example call Claim function from dApp":"import { tonConnectUI } from '@tonconnect/ui';\nfunction claimJetton(claimId, userAddress) {\n    const claimUrl = `https://mainnet-airdrop.tonapi.io/v1/airdrop/claim/${userAddress}?id=${airdropId}`;\n    fetch(claimUrl)\n        .then((response) => response.json())\n        .then(({ claimMessage }) => {\n            tonConnectUI.sendTransaction({\n                validUntil: Math.floor(Date.now() / 1000) + 300, // 5 minutes\n                messages: [\n                    {\n                        address: claimMessage.address,\n                        amount: claimMessage.amount,\n                        payload: claimMessage.payload,\n                        stateInit: claimMessage.state_init,\n                    },\n                ],\n            });\n        })\n        .catch((error) => console.error('Error:', error));\n}\nclaimJetton('<ID of Airdrop from tonconsole>', '<User address from tonConnectUI>');","test-сlaim-button#Test Сlaim button":"It is used for testing purposes and leads to a reference implementation of the application.\nDo not use it for production distribution, as it is not intended for that and does not guarantee reliable operation.","distribution-completion-procedure#Distribution completion procedure":"Before withdrawing profit and remaining Jettons, you need to properly complete the distribution to prevent Recipients from attempting to Claim after the distribution has ended.First, you need to click the Disable claim button to deactivate the API Claim endpoint through the dApp.\nSecond, click the Complete airdrop button to send special messages that lock the distribution contracts.\nAfter this, you can safely withdraw the remaining Jettons and accumulated TONs from the distribution contracts to the Airdrop admin`s address."}},"/tonapi/rest-api/dns":{"title":"DNS","data":{"":"The DNS service provides access to the TON DNS. This service enables retrieval of detailed information about domain names, including ownership, expiration dates, and associated accounts. DNS is used to map human-readable domain names to blockchain addresses, facilitating interaction with accounts and services on the TON network.","operations#Operations":""}},"/tonapi/rest-api/accounts":{"title":"Accounts","data":{"":"Accounts service provide API access to structured account information within the TON network. Allows retrieval of data such as balance, transaction history, DNS, multisigs, NFTs, Jettons, and other account-related details without dealing with low-level specifics. All data is regularly updated and can be used to build applications that require accurate and up-to-date account information.","operations#Operations":""}},"/tonconsole/tonkeeper-messages":{"title":"Push Notifications for Decentralized Apps","data":{"about#About":"Tonkeeper Messages is a powerful tool for communicating with the users who already connected their wallets to your app using TonConnect. It’s easy-to-use and flexible: you can significantly increase the user retention and conversion rate for your decentralized applications. Tonkeeper Messages is designed like a convenient and trusted way to message the highly motivated audience of Tonkeeper.It’s best for:\nMarketing campaigns.\nAnnouncements.\nEvent reminders.\nApp and account updates.","connect-your-dapp#Connect Your Dapp":"To connect a decentralized app to your project, you need to register and verify it. One project can have only one connected app to prevent scam. You will need to create a new project to connect another app.","steps#Steps":"Go to Tonkeeper Messages.\nEnter a TonConnect manifest URL or an app URL to register your app. About TonConnect. About TonConnect Manifest.\nClick Register.\nCreate a tc-verify.json file.\nCopy the payload key and paste it into the tc-verify.json file.\nMake the tc-verify.json file available at the link specified under the payload key in Tonkeeper Messages.\nClick Verify.","push-notifications#Push Notifications":"To start messaging users, you need to refill the number of messages available to you. The Tonkeeper Messages tab displays the number of available messages on the right side of the screen. Click Refill if you need more of them. If your TonConsole balance is low, you will be asked to refill it.Pass the token into the header every time you send a request to message users. The token is secret, don’t reveal it to any third party. If your token was compromised, generate a new one.","example#Example":"-H ' Authorization: Bearer **YOUR TOKEN**'You can message all the users, who connected to your app, or one certain wallet if you know the address:\nTo send a message to one wallet, pass the \"address\": \"UQ...ER” into the request body. “...” is a wallet address.\nTo send a message to all the users, skip the “address” field.\n{\n  \"message\": \"hello\",\n  \"address\": \"UQ...ER\",\n  \"link\": \"http://my_dapp.com/event\"\n}\nOne message can have only 255 characters."}},"/tonapi/rest-api/emulation":{"title":"Emulation","data":{"":"The Emulation methods provide tools for predicting the outcomes of blockchain transactions before they are executed. These tools allow for simulating transactions, offering insights into their results, including an almost precise estimate of network fees (with a small margin of error due to limitations in fully emulating a contract’s internal state).","possible-use-cases#Possible use cases":"Predicting transaction outcomes to verify correctness before execution.\nEstimating network fees for accurate cost calculation.\nEnabling services to display transaction results to end users in advance.","implementation-example#Implementation Example":"A detailed example of gasless transaction implementation is available in the Cookbook.","operations#Operations":""}},"/tonapi/rest-api/connect":{"title":"Connect","data":{"operations#Operations":""}},"/tonapi/rest-api/inscriptions":{"title":"Inscriptions","data":{"operations#Operations":""}},"/tonapi/rest-api/blockchain":{"title":"Blockchain","data":{"":"The Blockchain service provides low-level access to the TON blockchain, enabling retrieval of detailed information about blocks, transactions, accounts, and more. These endpoints are essential for building tools that require deep blockchain data and are critical for applications that interact closely with the TON blockchain.TONAPI ensures that data retrieved from the blockchain is accurate and up-to-date by continuously indexing the blockchain and maintaining a low-latency connection to the TON network.","operations#Operations":""}},"/tonapi/rest-api/jettons":{"title":"Jettons","data":{"":"The Jettons service provides access to fungible tokens on the TON blockchain. This service enables retrieval of detailed information about fungible tokens, including balances, transaction history, and metadata. Jettons are digital assets that can be transferred between users and used as a medium of exchange within the TON ecosystem.","operations#Operations":""}},"/tonapi/rest-api/events":{"title":"Events","data":{"":"Events service provides access to high-level actions that occur on the TON blockchain. These actions are derived from traces, which represent a series of transactions caused by a single inbound message. Events are meaningful operations such as Jetton transfers, NFT purchases, and other user interactions. By using the Events service, you can retrieve detailed information about user activities on the TON blockchain.\nCan't be used for building logic, as the structure of events can change at any\ntime.\nUse it only for displaying information to users.","operations#Operations":""}},"/tonapi/rest-api/rates":{"title":"Rates","data":{"":"Rates service provides access to exchange rates for various tokens on the TON blockchain. This service calculates token prices using data from our indexer and liquidity pools such as Stonfi and Dedust, offering a comprehensive view of verified tokens, their reserves, and holder counts.\nThe rates provided are for informational purposes only. Do not use this data for financial transactions.","logic-of-token-price-calculation#Logic of Token Price Calculation":"Our Rates service utilizes a systematic approach to gather and process data:","data-sources#Data Sources:":"By leveraging the analytics service in tonconsole, we obtain data on pools from Stonfi and Dedust.\nThe collected information includes token addresses, reserves, and the number of holders for verified tokens.","price-calculation#Price Calculation:":"For standard pools: We apply the formula , where  and  are volumes of two assets in the pool, and  is a constant.\nFor Dedust stable pools: We use a modified formula  to account for the specifics of these pools.\nYou can view the implementation of these calculations here .","data-analysis#Data Analysis:":"We evaluate minimum holder counts to ensure token relevance.\nPool reserves are analyzed and equated to TON for consistency.","troubleshooting#Troubleshooting":"If your token has over 100 TON in liquidity but doesn't receive a price from the API, please contact us with the following information:\nToken address\nLiquidity amount\nNumber of holders\nSend this information to @zakhar_petukhov for assistance.","operations#Operations":"Remember, while this service provides valuable insights into token rates on the TON blockchain, it should not be used as the sole basis for financial decisions or transactions."}},"/tonapi/rest-api/nft":{"title":"NFT","data":{"":"The NFT service provides access to non-fungible tokens (NFTs) on the TON blockchain. This service enables retrieval of detailed information about NFTs, including metadata, ownership, and transaction history. NFTs are unique digital assets that represent ownership of various items, such as collectibles, art, and virtual real estate.","operations#Operations":""}},"/tonapi/rest-api/multisig":{"title":"Multisig","data":{"operations#Operations":""}},"/tonapi/rest-api/lite-server":{"title":"Lite Server","data":{"":"The Lite Server service provides access to raw data from the blockchain, offering a streamlined and efficient way to interact with the blockchain’s lower-level functionalities. This service is ideal for developers and advanced users who need direct access to the blockchain’s state, blocks, and transactions","operations#Operations":""}},"/tonapi/rest-api/storage":{"title":"Storage","data":{"operations#Operations":""}},"/tonapi/rest-api/utilities":{"title":"Utilities","data":{"":"The Emulation methods offers tools for simulating the behavior of messages within the blockchain before they are actually sent. This service is particularly useful for developers and users who wish to test and verify the potential outcomes of their actions without committing them to the blockchain.","operations#Operations":""}},"/tonapi/rest-api/traces":{"title":"Traces","data":{"":"Traces service provides access to low-level transaction traces on the TON blockchain. This service enables retrieval of detailed information about individual transactions, including input and output data, gas usage, and execution status. Traces are essential for debugging and analyzing blockchain interactions, as they provide a detailed view of the transaction lifecycle.","operations#Operations":""}},"/tonapi/rest-api/staking":{"title":"Staking","data":{"":"The Staking service provides essential endpoints for interacting with staking pools on the network. It allows users to view and manage their participation in various staking pools.","operations#Operations":""}},"/tonapi/rest-api/wallet":{"title":"Wallet","data":{"":"The Wallet service provides a comprehensive set of endpoints for managing and interacting with blockchain wallets. This service is designed to support various wallet operations, including emulation, backup, authentication, and retrieval of wallet-specific data.","operations#Operations":""}},"/tonapi/dapp/building":{"title":"Guide to Building a dApp with TON API","data":{"":"This guide provides detailed instructions for building a decentralized application (dApp) using TON API and TonConnect, including step-by-step explanations and code examples. The complete project is available on GitHub.","prerequisites#Prerequisites":"Before you begin, ensure you have the following tools and accounts set up:\nNode.js (version >= 20)\nGit installed on your computer\nTON API Key from TonConsole\nBasic knowledge of React and TypeScript (optional but recommended)","creating-a-project#Creating a Project":"We'll create a React project using Vite with the TypeScript template. This setup is optional—you can use a different stack if preferred.","step-1-initialize-the-project#Step 1: Initialize the Project":"Run the following commands to create a new project using the TypeScript template:\nnpm create vite@latest tonapi-dapp -- --template react-ts\ncd tonapi-dapp","add-tonconnect#Add TonConnect":"To integrate TonConnect, we need to install the TonConnect UI React library:\nnpm install @tonconnect/ui-react\nUpdate the src/main.tsx file to include the TonConnectUIProvider:\nimport { TonConnectUIProvider } from '@tonconnect/ui-react';\nimport App from './App.tsx';\ncreateRoot(document.getElementById('root')!).render(\n  <TonConnectUIProvider\n    manifestUrl=\"https://ton-connect.github.io/demo-dapp-with-react-ui/tonconnect-manifest.json\"\n  >\n    <App />\n  </TonConnectUIProvider>\n);\nFor correct operation, specify the correct manifestUrl in the TonConnectUIProvider.","integrating-ton-api#Integrating TON API":"To use TON API, install the necessary libraries:\nnpm install @ton-api/client @ton/core\nFor using @ton/core in a browser environment, you need to include the Buffer polyfill.","add-buffer-polyfill#Add Buffer Polyfill":"To ensure @ton/core works correctly in the browser, install the vite-plugin-node-polyfills:\nnpm install vite-plugin-node-polyfills\nThen configure Vite by updating vite.config.ts:\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport { nodePolyfills } from 'vite-plugin-node-polyfills';\nexport default defineConfig({\n  plugins: [nodePolyfills(), react()],\n  base: '/tonapi-dapp-example/',\n});","create-the-ton-api-client#Create the TON API Client":"Next, set up a client to interact with the TON API. Create a new file src/tonapi.ts with the following content:\nimport { TonApiClient } from '@ton-api/client';\nconst ta = new TonApiClient({\n  baseUrl: 'https://tonapi.io',\n  apiKey: import.meta.env.VITE_TONAPI_KEY || undefined,\n});\nexport default ta;\nNote: Ensure you add your TON API key to the .env file:\nVITE_TONAPI_KEY=your-api-key","fetching-jetton-balances#Fetching Jetton Balances":"Now, we’ll fetch and display the user’s jetton balances. Update the src/App.tsx file:\nimport { useEffect, useState } from \"react\";\nimport { TonConnectButton, useTonAddress } from \"@tonconnect/ui-react\";\nimport { JettonBalance } from \"@ton-api/client\";\nimport ta from \"./tonapi\";\nfunction App() {\n  const [jettons, setJettons] = useState<JettonBalance[] | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const connectedAddressString = useTonAddress();\n  useEffect(() => {\n    if (!connectedAddressString) {\n      setJettons(null);\n      return;\n    }\n    ta.accounts\n      .getAccountJettonsBalances(connectedAddressString)\n      .then(res => setJettons(res.balances))\n      .catch(err => setError(err.message || \"Failed to fetch jettons\"));\n  }, [connectedAddressString]);\n  return (\n    <div>\n      <TonConnectButton />\n      <h1>Jetton Balances</h1>\n      {jettons ? (\n        jettons.map(j => (\n          <div key={j.jetton.id}>\n            {j.jetton.name}: {j.balance}\n          </div>\n        ))\n      ) : (\n        <p>No jettons found</p>\n      )}\n      {error && <p>{error}</p>}\n    </div>\n  );\n}\nexport default App;","implementing-jetton-transfer#Implementing Jetton Transfer":"Now that we have jetton balances displayed, let's add a transfer functionality. We’ll implement a modal to send jettons.","step-1-create-sendjettonmodal#Step 1: Create SendJettonModal":"Create a new file src/components/SendJettonModal.tsx with the following code:\nimport { useState } from \"react\";\nimport { JettonBalance } from \"@ton-api/client\";\nimport { useTonConnectUI } from \"@tonconnect/ui-react\";\nimport { getJettonSendTransactionRequest } from \"../utils/jetton-transfer\";\nexport const SendJettonModal = ({ jetton, senderAddress, onClose }) => {\n  const [recipientAddress, setRecipientAddress] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [tonConnectUI] = useTonConnectUI();\n  const handleSubmit = () => {\n    try {\n      const transaction = getJettonSendTransactionRequest(\n        jetton, amount, recipientAddress, senderAddress\n      );\n      \n      tonConnectUI.sendTransaction(transaction)\n        .then(() => {\n          setError(null);\n          onClose();\n        })\n        .catch(e => setError(e.message || \"Transaction failed\"));\n    } catch (e) {\n      setError(e instanceof Error ? e.message : \"Unexpected error occurred\");\n    }\n  };\n  return (\n    <div className=\"modal\">\n      <div className=\"modal-content\">\n        <h2>Send {jetton.jetton.name}</h2>\n        {error && <p>{error}</p>}\n        <label>\n          Recipient Address:\n          <input value={recipientAddress} onChange={e => setRecipientAddress(e.target.value)} />\n        </label>\n        <label>\n          Amount:\n          <input value={amount} onChange={e => setAmount(e.target.value)} />\n        </label>\n        <button onClick={handleSubmit}>Send</button>\n        <button onClick={onClose}>Cancel</button>\n      </div>\n    </div>\n  );\n};","step-2-utility-for-transactions#Step 2: Utility for Transactions":"Create src/utils/jetton-transfer.ts to handle transaction creation:\nimport { JettonBalance } from '@ton-api/client';\nimport { beginCell, Address, toNano } from '@ton/core';\nimport { SendTransactionRequest } from '@tonconnect/ui-react';\nimport { fromDecimals } from './decimals';\nexport const getJettonSendTransactionRequest = (\n  jetton: JettonBalance, amountStr: string, recipientAddressStr: string, senderAddress: Address\n): SendTransactionRequest => {\n  const amount = fromDecimals(amountStr, jetton.jetton.decimals);\n  const recipient = Address.parse(recipientAddressStr);\n  const body = beginCell()\n    .storeUint(0xf8a7ea5, 32) // jetton transfer operation\n    .storeUint(0, 64) // query ID\n    .storeCoins(amount) // jetton amount\n    .storeAddress(recipient)\n    .storeAddress(senderAddress)\n    .storeUint(0, 1) // empty payload\n    .storeCoins(1n) // forward TON amount\n    .endCell();\n  return {\n    validUntil: Math.floor(Date.now() / 1000) + 360,\n    messages: [{\n      address: jetton.walletAddress.address.toRawString(),\n      amount: toNano('0.05').toString(), // estimated fee\n      payload: body.toBoc().toString('base64'),\n    }]\n  };\n};","final-steps#Final Steps":"","launch-the-development-server#Launch the Development Server":"Run the following command to start the development server:\nnpm run dev\nYour dApp will be accessible at http://localhost:3000.","complete-source-code#Complete Source Code":"The full source code for this project is available on GitHub. You can also view the working example on GitHub Pages.","additional-resources#Additional Resources":"TON API Documentation: docs.tonconsole.com\nTonConnect Documentation: tonconnect.me\n@ton/core Library: @ton/core on npm\nHappy building your dApp!"}},"/tonapi/rest-api/gasless":{"title":"Gasless","data":{"":"Gasless transactions on the TON platform enable users to send transactions without paying gas fees directly from their wallets. This is achieved using Signed Internal Messages sent through a gas proxy contract, which covers the transaction fees on behalf of the user. This approach simplifies blockchain interactions, making it easier for users who may not have TON tokens in their wallets.This service only works with W5 wallets","architecture#Architecture":"Gasless transactions leverage Signed Internal Messages. These messages are signed by the user but routed through a smart contract that pays the fees using a gas proxy. This eliminates the need for users to hold TON tokens for transaction fees.TONAPI plays a critical role by simulating transaction execution to accurately estimate fees and sending the transaction to multiple validators to increase the chances of successful processing. Additionally, TONAPI ensures that the user’s wallet and gas proxy contract are in the same shard, minimizing latency and ensuring fast transaction processing.","process-for-executing#Process for Executing":"Fetch Configuration: Request the gasless transaction parameters using /v2/gasless/config.\nEstimate Transaction: Send a POST request to /v2/gasless/estimate/{master_id} to receive a payload for signing.\nSign Payload: Sign the received payload with your private key.\nSend Transaction: Submit the signed message via POST to /v2/gasless/send.","gasless-transactions#Gasless transactions":"TONAPI supports several gasless transaction types referred to as gasless protocols:\nGasless protocol\tDescription\tgasless\tGasless Transfer involves two transactions: the primary Jetton transfer and a secondary transfer that covers the gas fees. The secondary transfer (commission) must be paid using a limited set of Jettons (refer to the gaslessConfig method for the complete list), while the primary transfer can use any Jetton.\tgasless-swap\tGasless Swap consists of two transactions: the swap itself and an additional Jetton transfer that covers gas fees. Currently, the protocol supports only Stonfi swaps. Ensure that any excess funds from the swap are directed to the TONAPI relayer, as this will reduce the overall commission.\t\tgasless-generic-transfer\tGasless Generic Transfer consists of a primary Jetton transfer that can include any payload, along with a separate transaction to cover the commission. Gasless Swap differs from Gasless Generic Transfer in that our swap emulation is highly reliable. This accuracy allows us to optimize commission fees by adjusting for any excess funds returned to our relayers.\t\t\nThe commission is always processed as a separate transfer and must be paid using one of the supported Jettons.\nBoth the gaslessSend and gaslessEstimate methods include the protocol used in their responses.","implementation-example#Implementation Example":"A detailed example of gasless transaction implementation is available in the Cookbook, showcasing the approach across multiple programming languages.","operations#Operations":""}},"/tonkeeper/deep-linking":{"title":"Deep Linking into Tonkeeper","data":{"":"Your application might operate outside of Tonkeeper, like a website or a mobile app. Deep links allow you to seamlessly direct users back to a meaningful location within the Tonkeeper app.","deep-linking-with-tonkeeper#Deep linking with tonkeeper://":"Use the tonkeeper:// URI scheme to deep link into a user's Tonkeeper client on the following platforms:\nMobile clients:\niPhone\nAndroid","supported-uri-schemes#Supported URI Schemes":"Tonkeeper supports multiple URI schemes, allowing for flexibility depending on the context in which the link is used. The following schemes are supported:\nton://: This scheme is part of the broader TON blockchain standard, enabling interoperability across different TON-based wallets and services.\ntonkeeper://: A custom URI scheme specifically for deep linking into the Tonkeeper app.\nhttps://app.tonkeeper.com/: A web-based scheme that can be used in browsers and other environments that do not support custom URI schemes.\nAll three schemes are interchangeable and serve similar purposes, directing users to specific actions or pages within Tonkeeper.","supported-uris#Supported URIs":"For each supported action, the structure of the URI is the same across all three schemes. Replace {PREFIX} with the desired scheme (ton://, tonkeeper://, or https://app.tonkeeper.com/).","transfer#Transfer":"","1-open-transfer-screen#1. Open Transfer Screen":"Description: Opens the pre-filled Send screen and prompts the user to enter the missing data.\nFormat:\n{PREFIX}transfer/{ADDRESS}?amount={AMOUNT}&text={TEXT}\nParameters:\n{ADDRESS} (required): The recipient's TON address.\namount (optional): The amount of TON to send, in nanocoins.\ntext (optional): A URL-encoded UTF-8 text message to attach to the transfer.\nExamples:\nAddress only:\nton://transfer/{ADDRESS}\ntonkeeper://transfer/{ADDRESS}\nhttps://app.tonkeeper.com/transfer/{ADDRESS}\nAddress + Amount:\n{PREFIX}transfer/{ADDRESS}?amount={AMOUNT}\nAddress + Text:\n{PREFIX}transfer/{ADDRESS}?text={TEXT}\nAddress + Amount + Text:\n{PREFIX}transfer/{ADDRESS}?amount={AMOUNT}&text={TEXT}","2-address-with-binary-payload#2. Address with binary payload":"Description: Opens the emulation screen or screen with alert about blind signing transactions with amount and destionation. This can be done using either https://app.tonkeeper.com/ or tonkeeper:// schemes.\nFormat:\n{PREFIX}transfer/{ADDRESS}?amount={AMOUNT}&bin={BINARY_DATA}\nParameters:\n{ADDRESS} (required): The recipient's TON address.\nbin (optional): url-encoded base64 BoC which will be attached as a body to internal message.\namount (requered if bin is presented): The amount of TON to send, in nanocoins.","3-expiry-timestamp#3. Expiry Timestamp":"Description: Opens the Send screen with an expiry timestamp for the transaction.\nFormat:\n{PREFIX}transfer/{ADDRESS}?amount={AMOUNT}&text={TEXT}&exp={EXPIRY_TIMESTAMP}\nParameters:\n{ADDRESS} (required): The recipient's TON address.\namount (optional): The amount of TON to send, in nanocoins.\ntext (optional): A URL-encoded UTF-8 text message to attach to the transfer.\nexp (optional): Expiry timestamp in seconds since the Unix epoch.\nExample:\nhttps://app.tonkeeper.com/transfer/EQD2NmD_lH5f5u1Kj3KfGyTvhZSX0Eg6qp2a5IQUKXxOG21n?amount=100000&text=test&exp=500","4-transfer-jetton#4. Transfer Jetton":"Description: Opens the Send screen with a jetton transfer.\nFormat:\nhttps://app.tonkeeper.com/transfer/{ADDRESS}?jetton={JETTON_ADDRESS}&amount={AMOUNT}&text={TEXT}\nParameters:\n{ADDRESS} (required): The recipient's TON address.\njetton (required): The jetton master address.\namount (optional): The amount of TON to send, in nanocoins.\ntext (optional): A URL-encoded UTF-8 text message to attach to the transfer.","buy-ton#Buy Ton":"Description: Directs the user to a screen where they can purchase TON tokens.Format:\n{PREFIX}buy-ton","staking#Staking":"Description: Navigates to the staking screen, where users can stake/unstake their TON.Format:\n{PREFIX}staking","pool#Pool":"Description: Opens a specific liquidity pool within Tonkeeper using the given address.Format:\n{PREFIX}pool/{ADDRESS}\nParameters:\n{ADDRESS} (required) — liquidity address in any form","exchange#Exchange":"Description: Directs the user to an exchange provider\nFormat:\n{PREFIX}exchange?provider={PROVIDER}\nParameters:\nprovider (required) — exchange provider ID. For example, mercurio\ntoToken (optional) — token to take","swap#Swap":"Description: Opens a swap interface where users can exchange tokens.\nFormat:\n{PREFIX}swap?fromToken={FROM_TOKEN}&toToken={TO_TOKEN}\nParameters:\nfromToken (optional) — token to give\ntoToken (optional) — token to take","battery-screen#Battery screen":"Description: Opens battery screen\nFormat:\n{PREFIX}battery?promocode={PROMOCODE}\nParameters:\npromocode (optional) — promocode for revenue share","action#Action":"Description: Opens transaction bottomsheet with provided eventId\nFormat:\n{PREFIX}action?eventId={EVENT_ID}\nParameters:\neventId (required) — event ID (hash)","dapp#DApp":"Description: Opens in-app browser with DApp. Works only for DApps which provided in browser catalog\nFormat:\n{PREFIX}dapp/{DAPP_URL}\nParameters:\n{DAPP_URL}  (required) — DApp URL. Supports only https protocol","ton-connect#TON Connect":"bridge.md at main ton-blockchain/ton-connect","standard-reference#Standard Reference":"The ton:// scheme is part of the broader TON blockchain standard, which defines how TON-based applications and services should implement deep linking. You can learn more about the TON standard and its URI scheme by visiting the official documentation here.","example-workflows#Example Workflows":"Quick Payments: Integrate payment requests directly from your website, allowing users to complete transactions with a single tap using any of the supported URI schemes.\nIn-app Transactions: Use deep links to facilitate seamless transfers between users within your application.\nCross-Wallet Compatibility: Utilize the ton:// scheme to ensure compatibility with other TON-based wallets and services.","external-deep-links#External Deep Links":"Tonkeeper supports integration with other TON services through similar deep linking structures.","tonhub#Tonhub":"Description: Tonhub also supports deep linking for transfers, compatible with Tonkeeper.\nFormat:\nhttps://tonhub.com/transfer/{ADDRESS}?amount={AMOUNT}&text={TEXT}\nExamples:\nhttps://tonhub.com/transfer/EQD2NmD_lH5f5u1Kj3KfGyTvhZSX0Eg6qp2a5IQUKXxOG21n\nhttps://tonhub.com/transfer/EQD2NmD_lH5f5u1Kj3KfGyTvhZSX0Eg6qp2a5IQUKXxOG21n?amount=10000\nhttps://tonhub.com/transfer/EQD2NmD_lH5f5u1Kj3KfGyTvhZSX0Eg6qp2a5IQUKXxOG21n?text=just%20message\nhttps://tonhub.com/transfer/EQD2NmD_lH5f5u1Kj3KfGyTvhZSX0Eg6qp2a5IQUKXxOG21n?amount=7000&text=just%20message","example-workflows-1#Example Workflows":"Quick Payments: Integrate payment requests directly from your website, allowing users to complete transactions with a single tap using tonkeeper://transfer links.\nIn-app Transactions: Use deep links to facilitate seamless transfers between users within your application.\nLink to Specific Transfers: Provide support or history review by linking directly to specific transactions or transfers.\nThis restructured documentation groups related deep links together, making it easier to understand the available options and how to use them effectively."}},"/tonconsole/jettons/airdrop/terms":{"title":"Airdrop Terms of Use","data":{"":"PLEASE READ THESE AIRDROP TERMS OF USE CAREFULLY BEFORE USING THE AIRDROP SOLUTION (AS DEFINED BELOW). BY USING THE AIRDROP SOLUTION, YOU AGREE TO BE BOUND BY THESE TERMS OF USE. IF YOU DO NOT AGREE TO THESE TERMS OF USE YOU MUST NOT USE AIRDROP SOLUTION FOR ANY PURPOSE WHATSOEVER.In these Airdrop Terms of Use, We, Our, Ourselves, Us or Licensor means Scalable Data Solutions Inc (a company incorporated in RAK DAO under number 01010497 whose registered office is at Office A, RAK DAO Business Centre, RAK BANK ROC Office, Ground Floor, Al Rifaa, Sheikh Mohammed Bin Zayed Road, Ras Al Khaimah, United Arab Emirates) and You, Your, Airdrop admin or Licensee means you (and if you are using the Airdrop Solution on behalf of a legal person, business or other organisation (Organisation) includes you and also such Organisation).By using the Airdrop Solution on behalf of any Organisation, You represent and warrant that You have all necessary capacity and authority to enter into these Airdrop Terms of Use on behalf of such Organisation as a legally binding contract between such Organisation and Us in all applicable jurisdictions and that the Organisation enters into such contract.We may update these Airdrop Terms of Use, T&C Terms, Ton Console terms of use, our Privacy Policy and any of the policies or other documents referred to in them from time to time by notifying You by any other reasonable means. Such updates shall take effect within 10 days after details of them are updated (or, if earlier, of You otherwise being notified of the update). Please check our website (https://tonconsole.com/) regularly for details of updates. If You do not agree to any such update, You should stop using the Airdrop Solution and Airdrop Data (as defined below) before the update takes effect.","airdrop-solution-and-how-we-work-with-airdrop-admins#Airdrop Solution and how We work with Airdrop admins":"The Airdrop Solution allows the issuers / distributors (such issuer/distributor referred as Airdrop admin) to distribute their jettons (in these Airdrop Terms of Use and T&C Terms “jetton” refers to all types of tokens, irrespective of their nature) in accordance with the terms and conditions established by such Airdrop admins and regulating the participation of end users (Recipients) in the Airdrop admin’s airdrop program (Airdrop). The Airdrop Solution can be accessed at https://tonconsole.com/. The Airdrop Solution is intended to be used as an interface between: (a) our platform built on a blockchain system offered or operated by Us from time to time whether accessed via the internet, mobile device or other electronic device (Platform); and (b) the applications or services provided by You through Your software and cloud services (Application).As part of use of the Airdrop Solution, You may access or otherwise use on Our Platform certain content, including software or other content, materials or data made available via Airdrop Solution\n(Airdrop Data) and technical and commercial terms available at https://docs.tonconsole.com/tonconsole/jettons/airdrop (T&C Terms).","these-airdrop-terms-of-use#These Airdrop Terms of Use":"The main things that We care about are that each of Our Platform, the rights of the Recipients and our rights during provision of the Airdrop Solution is protected.These Airdrop Terms of Use along with the T&C Terms set out Our and Your respective rights and obligations relating to the use of Our Airdrop Solution to interface between Our Platform and Your Application and use of the Airdrop Data.Your use of any of Our other products or services on Our Platform (Other Products) will be on different terms and conditions. If, and only so far as, these Airdrop Terms of Use and the T&C Terms are inconsistent with the terms and conditions applicable to Other Products, such other terms and conditions shall apply.If these Airdrop Terms of Use or T&C Terms do not specifically say that You can do something in connection with the Airdrop Solution, the Airdrop Data or the Platform, then You cannot.We may add, modify or discontinue any feature, functionality or any other tool within Airdrop Solution from time to time at Our own discretion and without further notice to You. The Airdrop admin will have to confirm and check all the terms before the creation of the Airdrop.","access-to-the-airdrop-solution#Access to the Airdrop Solution":"You agree that the Recipients shall not be prompted to provide any passwords, usernames or other login details that they use to access the Platform directly to You.How You may use the Airdrop SolutionYou must ensure that Your use of the Airdrop Solution complies with:\nthese Airdrop Terms of Use, T&C Terms and Privacy Policy;\nall documentation relating to the Airdrop Solution and/or Platform provided or made available by Us to You (Documentation) (as updated from time to time);\nany terms applicable to Your Application;\nany terms applicable to the Platform;\nany other terms agreed between Us and You; and\nall relevant legislation, regulations, codes of practice, guidance and other requirements of any relevant jurisdiction, government or regulatory agency or other regulatory body.","what-the-airdrop-solution-must-not-be-used-for#What the Airdrop Solution must not be used for":"You must not use the Airdrop Solution to send spam or to interfere with or degrade Our services in any way.You must also not use Airdrop Solution for any unlawful purpose or activity whatsoever, including fraud or terrorism, or to promote any unlawful act, or in any way which:\nmakes any private information on the Platform publicly available on the Application;\ncauses or is intended to cause annoyance, inconvenience or needless anxiety;\ninterferes with, or attempts to interfere with, the access of any user, host or network, including, without limitation, sending a virus, overloading, flooding, spamming;\ndirectly or indirectly, engages in or facilitates any form of Sybil attack, fraudulent activity, or deceptive practices related to the issuance, distribution, or market behaviour of the jettons;\nis abusive, harmful, threatening or defamatory or may otherwise cause offence (including uploading any material that contains a virus or other malicious code);\ndoes or could potentially breach a legal duty to anyone else (including a duty of confidentiality) or infringe a person’s right to privacy;\npromotes discrimination or is likely to incite hatred; or\nmay infringe the intellectual property rights (e.g. copyright, trademarks, service marks, patents, database rights, know-how, design rights, domain names, know-how and rights in software (registered or not)) or any other rights of anyone (including Ours).\nYou must also not:\ndistribute jettons to fake, inactive, or controlled addresses for the purpose of creating an illusion of widespread adoption, decentralization, or market interest;\ngenerate, utilize, or control multiple wallets or accounts, whether manually, through automated scripts, or via third parties, for the purpose of inflating the number of jetton holders or misleading the public about the adoption or distribution of jettons;\nmanipulate the jettons market, engage in or facilitate any scheme designed to artificially influence jetton’s price, trading volume, or liquidity;\ndistribute, license, sell, rent, lease or otherwise deal in or encumber (like a guarantee, mortgage or security interest, for example) the Airdrop Solution;\nmodify, add to, or otherwise enhance the Airdrop Solution;\nexcept as strictly necessary for You to integrate the Airdrop Solution with Your Application in a manner (and for such purposes) that comply at all times with these Airdrop Terms of Use and T&C Terms, copy or decompile the Airdrop Solution and shall not observe, study or test the functioning of the Airdrop Solution (or any part of it), but only so far as the same cannot be restricted by law; or\ninfringe or copy Our code or content or the design of Our Platform, the Airdrop Solution and any of Our other intellectual property rights.","compliance-and-monitoring#Compliance and Monitoring":"You must implement reasonable anti-fraud and anti-Sybil attack measures, including but not limited to identity verification, wallet activity checks, and distribution transparency mechanisms, to prevent the risk of prohibited activities.\nWe reserve the right to audit, investigate, or request evidence of compliance with these Airdrop Terms of Use. In the event of suspected fraudulent activity, we may suspend or terminate services and report violations to relevant regulatory authorities.","licences-to-use-the-airdrop-solution-and-airdrop-data#Licences to use the Airdrop Solution and Airdrop Data":"We grant You a non-exclusive, revocable and non-transferable licence, without a right to sublicense to anyone, to use and to permit the Recipients to use, the Airdrop Solution for the services rendered via Your Application and subject to the restrictions on use in these Airdrop Terms of Use. You must not use the Airdrop Solution in conjunction with any commercial purpose.The Airdrop Solution licensed under these Airdrop Terms of Use shall not include any error corrections, patches, fixes, updates, upgrades, new releases or new versions subsequently received (if any) of the Airdrop Solution. If the Airdrop Solution is licensed under these Airdrop Terms of Use and T&C Terms includes a licence to error corrections, patches, fixes, updates, upgrades, new releases or new versions subsequently released by Us (Releases), You will implement and use such Releases as soon as possible and in any event in the time period specified by Us. We shall not be liable for any losses or claims arising out of or in connection with Your use of any prior iterations of the Airdrop Solution after We make available any Releases to You.We grant You a non-exclusive, revocable, and non-transferable licence, with a right to sublicense to the Recipients, to download, copy, display, view and use the Airdrop Data solely for the purpose of using the Airdrop Solution, provided that You shall not:\ncreate permanent copies of the Airdrop Data except to the extent permitted by these Airdrop Terms of Use;\nremove, alter, or cover up any trademark, service mark, copyright and other proprietary notices contained in the Airdrop Data;\nwithout Our prior written consent, make derivative works of, or commercially distribute or otherwise exploit the Airdrop Data, or use the Platform or any Airdrop Data in a way that inaccurately suggests an association between You and Us or Our licensors; or\notherwise use or exploit the Airdrop Data in any way for any purpose except as specifically permitted by these Airdrop Terms of Use or Our Privacy Policy, a copy of which is available on our Platform.\nThis means that:\nWe can grant licences to anyone else (and retain rights to do things with the Airdrop Solution and the Airdrop Data Ourselves);\nWe can decide to take the licences back from You; and\nYou are not permitted to transfer Your rights to anyone else or to allow anyone else to use the Airdrop Solution, the Airdrop Data or the Platform.\nYou accept that the Airdrop Data may contain third party intellectual property rights and You shall ensure that Your use of such Airdrop Data does not infringe those rights.Except for Your right to use the Airdrop Solution, Platform and Airdrop Data as specifically granted in these Airdrop Terms of Use, all intellectual property rights in and to the Airdrop Solution, Platform and Airdrop Data are Ours and remain Ours (or Our licensors’).If You acquire any intellectual property rights (e.g. copyright, trademarks, service marks, patents, database rights, know-how, design rights, domain names, know-how and rights in software (registered or not)) in the Airdrop Solution, Platform or any airdrop Data, You shall transfer these rights (both existing and future) with full title guarantee to Us or anyone else We nominate (or You will make this happen immediately). You shall sign all documentation and do such things as We think necessary to transfer those rights.You accept and understand that the Airdrop Solution and Airdrop Data contain confidential and proprietary information and You shall not conceal, modify, remove, destroy or alter in any way any of Our proprietary markings on or in the Airdrop Solution, the Airdrop Data or any related materials and documentation.","data-protection#Data protection":"You and We shall at all times comply with our respective obligations under applicable data protection laws.You and We shall at all times comply with our respective obligations in Our Privacy Policy, which is incorporated into and forms part of these Airdrop Solution Terms of Use.","the-airdrop-solution-licensors-rights#The Airdrop Solution Licensor’s rights":"We have the right at any time to access Your Ton Console account and to monitor Your use of Your Ton Console account to ensure You are complying with these Airdrop Terms of Use and T&C Terms.You grant Us a royalty-free, perpetual, irrevocable, non-exclusive, transferable licence to use, reproduce, copy, download, view modify, publish, edit, translate, distribute, perform, display and otherwise utilise any content or material that You provide to Us through the Airdrop Solution including the Recipient-related content or material and any data or analytics generated from the same, as set out in Our Privacy Policy.","our-marks#Our Marks":"All trademarks, logos and service marks (Marks) which appear on the Platform or the Airdrop Solution are Our registered and unregistered Marks or are licensed for use by Us by the owners of those Marks.Other Marks are proprietary marks and are registered to their respective owners.Nothing contained on the Platform or the Airdrop Solution should be construed as granting any licence or right to use any Marks displayed on the Platform or the Airdrop Solution without Our written permission.Misuse of any Mark displayed on the Platform or the Airdrop Solution, or any other content on the Platform, except as provided herein, is strictly prohibited.","confidentiality#Confidentiality":"You shall keep Our confidential information confidential. This includes all information (of any kind and in any format and coming into Your knowledge, possession or control in any way) relating to Our business, finance or technology, know-how, intellectual property rights, assets, strategy, products and other customers, where the information is identified as confidential at the time of disclosure or ought reasonably to be considered confidential given its nature or how it was disclosed (Confidential Information).You shall only use Our Confidential Information to use, and undertake development work with, the Airdrop Solution, and will give Us notice of any unauthorised misuse, disclosure, theft or loss of Our Confidential Information immediately upon becoming aware of this.You shall not without Our prior written consent use, disclose, copy or modify Our Confidential Information (or permit others to do so) other than as is strictly necessary for You to be able to do what You are permitted and/or required to do under these Airdrop Terms of Use.You may disclose Our Confidential Information to Your officers, employees, agents, professional advisers and contractors (and permit them to use, copy or modify Our Confidential Information) as is strictly necessary for You to be able to do what You are permitted and/or required to do under these Airdrop Terms of Use. Where disclosure to Your officers, employees, agents, professional advisers and contractors is necessary, You shall ensure such persons are made aware of and agree in writing to observe these same confidentiality obligations and at all times comply with them.You may disclose Our Confidential Information as required by law. In the event that You become legally compelled to disclose any of the Confidential Information, then (to the extent permitted by law) You shall give Us prompt written notice of the fact so that We may take such steps to prevent such disclosure as We deem appropriate and You shall co-operate with Us in such manner as We may reasonably require.","representations-warranties-and-disclaimers#Representations, warranties and disclaimers":"You represent, warrant and acknowledge that:\nYou hold all rights and have obtained all licences required to use the API integration You develop and the Airdrop Data; and\nYour use of the Airdrop Solution will not infringe Our rights or anyone else’s, nor will it breach any applicable laws or regulations.\nYou have the requisite power and authority to issue/distribute the jettons;\nWe provide purely technical services and do not offer financial, legal, or investment advice. The issuance, distribution, or use of jettons with the use of the Airdrop Solution is solely the responsibility of the Airdrop admin.\nYou accept full responsibility for verifying the eligibility, jurisdictional compliance, and legal status of all Recipients receiving jettons through the Airdrop Program and the Airdrop Solution.\nWe do not endorse, verify, or guarantee the legitimacy, security, or value of any jetton, or digital asset issued, distributed, or promoted using the Airdrop Solution.\nIt is solely your duty to ensure that distribution complies with applicable laws, regulations, and any restrictions in relevant jurisdictions.\nWe make no representations regarding the legal status of any jetton and assume no liability for non-compliance with legal or regulatory requirements related to the distribution of jettons.\nTo the maximum extent permitted by applicable law, You accept that the Airdrop Solution is provided on an ‘AS IS’ basis and that:\nthe Airdrop Solution may not be free of bugs or errors and that the existence of minor bugs or errors shall not constitute a breach of these Airdrop Terms of Use and T&C Terms;\nYou remain responsible for Your own hardware, content and the data uploaded through the Airdrop Solution;\nWe accept no responsibility for any liability that arises in connection with anyone else unlawfully obtaining access to Your Ton Console account in order to abuse the nature and intent of the API (although this does not include where We obtain access to Your Ton Console account as We are permitted to under these Airdrop Terms of Use and T&C Terms); and\nWe accept no responsibility for any liability that arises in connection with the theft of Your username or password by unauthorised third parties.\nWe do not represent or warrant that the Airdrop Solution shall be:\nuninterrupted or error free; or\ncompatible with third party software or equipment.\nAny representations or warranties that We make (and We are not saying that We are, unless We have to by applicable law) depend on You using the Airdrop Solution in compliance with these Airdrop Terms of Use and T&C Terms and the latest versions of all Documentation.We shall not be liable, nor be required to fix, any problem arising from:\nany modification made to any part of the Airdrop Solution by anyone other than Us without Our express prior written consent; or\nany defect or error wholly caused by any equipment or third party software used in connection with the Airdrop Solution.\nSubject to what it specifically says in these Airdrop Terms of Use and T&C Terms and to the maximum extent permitted by applicable law, We and Our suppliers:\nmake no other representations or warranties and do not agree to any other terms and conditions (express, implied or statutory) in relation to the Airdrop Solution, the Airdrop Data and the Platform or about results to be obtained from using the Airdrop Solution, the Airdrop Data or the Platform; and\nshall not be liable for any loss or damage arising out of any virus or other malicious code.","liability#Liability":"We shall not be liable to You or any Recipient for any liabilities, costs, expenses, damages and losses (including, but not limited to, any direct, indirect or consequential losses, loss of profits, goodwill, reputation, loss of business opportunity or anticipated savings, and all interest, penalties and legal costs (calculated on a full indemnity basis)) (collectively Losses), arising under or in connection with the Airdrop Program and/or the Airdrop Solution , even if We were aware of the possibility that such loss or damage might be incurred by You or an the Recipient.We shall not be responsible or liable for any Losses caused, directly or indirectly, by:\nany actions, omissions, or failures of third parties, including but not limited to Airdrop admins, third-party infrastructure providers, such as wallet providers, custodians or blockchain networks;\na Force Majeure Event;\nany action taken by Us as it deems reasonably necessary to ensure its compliance with applicable law and regulation;\nany failure, downtime (whether deriving from scheduled or unscheduled maintenance or otherwise), unavailability of or errors caused by the issuance/distribution of jettons;\nany actions, omissions, defaults or insolvency of the Airdrop admin; or\nany failure to provide the Airdrop Solution if such provision is prevented, hindered or delayed by changes to Our policies or procedures made in Our sole discretion in light of legal, regulatory, operational, security or reputational risks. In these circumstances, Our obligations will be suspended for as long as any change in Our policies and procedures remains in effect.\nTo the fullest extent permitted by law, our total liability under any claim related to Our services shall not exceed the amount paid to Us for the specific technical services provided to You under these Airdrop Terms of Use within the last twelve (12) months preceding the Loss.In the event of any Losses sustained by You for which We are liable under this clause, Our liability shall be reduced to the extent that Your own negligence contributed to such Losses.Except that We do not exclude or limit any liability to the extent the same cannot be excluded or limited by law (such as fraud, fraudulent misrepresentation, or personal injury resulting from Our or Our employees’ negligence).Other than as expressly stated, the limitations and exclusions of liability above apply to all losses, damages, liabilities and claims howsoever arising, including in negligence or otherwise.Force Majeure Event means acts of God, fire, flood, drought, earthquake or other natural disaster, epidemic or pandemic; terrorist attack, civil war, civil commotion or riots, war, threat of or preparation for war, armed conflict, imposition of sanctions, embargo, or breaking off of diplomatic relations; nuclear, chemical or biological contamination or sonic boom; any law or any action taken by a regulatory or governmental authority, including without limitation imposing an export or import restriction, quota or prohibition; collapse of buildings, fire, explosion or accident; any labour or trade dispute, strikes, industrial action or lockouts (other than in each case by the party seeking to rely on this clause, or companies in the same group as that party); non-performance by suppliers, subcontractors, blockchains, networks, exchanges or custodial services (other than by companies in the same group as the party seeking to rely on this clause); and interruption or failure of utility service","indemnification#Indemnification":"You agree to indemnify Us, our directors, officers, shareholders, affiliates and agents against all losses or damage, We may suffer related to:\nthe Application infringing the intellectual property rights of anyone (including Us);\nany breach by of Your obligations under these Airdrop Terms of Use;\nany misuse of the Airdrop Solution or the Airdrop Data, including any claim Your use of the Airdrop Data infringes the intellectual property rights or privacy rights of anyone else;\nany breach by You of any representation or warranty or non-performance of any of Your obligations under these Airdrop Terms of Use and T&C Terms;\nany claims, losses, damages, or liabilities of the Recipients arising from fraud, misrepresentation, illegal activities, regulatory violations, or breach of any applicable laws by the Airdrop admin; and\nany claims, losses, damages, or liabilities of the Recipients arising from any change of the market value or estimate of the jettons.\nThis means that, in these particular circumstances, You will fully reimburse Us for any losses on a ‘£’ for ‘£’ basis, without Us having to take steps to avoid or minimise Our loss or to prove this is direct or foreseeable.","updates-to-the-airdrop-solution#Updates to the Airdrop Solution":"We may make changes to the Airdrop Solution at any time and for any reason. You shall always check the latest version of these Airdrop Terms of Use and T&C Terms before launching an Airdrop Program. If any change We make is not acceptable to You, stop using the Airdrop Solution. Your continued use of the Airdrop Solution means that You accept the change to the Airdrop Solution.","termination#Termination":"If You breach these Airdrop Terms of Use and/or T&C Terms, Your rights to use the Airdrop Solution and the Airdrop Data will automatically terminate, and We can shut down or restrict Your access to the Airdrop Solution, the Airdrop Data and/or Your API integration.Otherwise, the licences granted by Us under these Airdrop Terms of Use and T&C Terms will continue until We terminate Your use (which we may do at any time for any reason and without notice) or You stop using the Airdrop Solution, Airdrop Data and the Platform.In the event that any of the licences granted by Us under these Airdrop Terms of Use and T&C Terms terminate for any reason, You shall promptly permanently delete and destroy all copies of the Airdrop Solution and/or the Airdrop Data in Your possession or control.Your obligations relating to the Airdrop Solution, Airdrop Data, data protection, security and confidentiality and the indemnities and licences granted by You and the limitations and exclusions of liability set out in these Airdrop Terms of Use and T&C Terms and any other provisions expressed or implied to survive will continue even after any licences (and/or these Airdrop Terms of Use and T&C Terms) have otherwise ended for any reason.","other#Other":"Nothing in these Airdrop Terms of Use or T&C Terms shall (except as expressly provided) be deemed to constitute a partnership, or create a relationship of principal and agent between You and Us for any purpose.You are only permitted to allow a third party to benefit from the Airdrop Solution (such as a related company of Yours or Your customers) if You ensure that such use:\ndoes not exceed Your permitted use under these Airdrop Terms of Use and T&C Terms;\nis controlled by You;\ndoes not involve the disclosure of any Confidential Information or Airdrop Data (other than in accordance with the terms of these Airdrop Terms of Use and T&C Terms); and\nis otherwise subject to and in accordance with these Airdrop Terms of Use and T&C Terms.","governing-law-and-jurisdiction#Governing law and jurisdiction":"These Airdrop Terms of Use and T&C Terms and any dispute or claim arising out of, or in connection with, these Airdrop Terms of Use and T&C Terms, their subject matter or formation (including non-contractual disputes or claims) shall be governed by, and construed in accordance with, the laws of England and Wales and subject to the exclusive jurisdiction of the courts of England and Wales.\nBoth parties shall first resolve any dispute or claim arising out of or relating to the Airdrop Terms of Use and T&C Terms by way of negotiation failing which mediation, to any mutually agreed to mediation service for mediation by providing to the mediation service a joint, written request for mediation, setting forth the subject of the dispute and the relief requested (Mediation). The parties shall cooperate with one another in selecting a mediation service and shall cooperate with the Mediation service and with one another in selecting a neutral mediator and in scheduling the Mediation proceedings. The parties covenant that they will use commercially reasonable efforts in participating in the Mediation. The parties agree that the mediator’s fees and expenses and the costs incidental to the Mediation will be shared equally between the parties.\nThe parties further agree that all offers, promises, conduct, and statements, whether oral or written, made in the course of the Mediation by any of the parties, their agents, employees, experts, and legal advisors, and by the mediator and any employees of the mediation service, are confidential, privileged, and inadmissible for any purpose, including impeachment, in any litigation, arbitration or other proceeding involving the parties, provided that evidence that is otherwise admissible or discoverable shall not be rendered inadmissible or non-discoverable as a result of its use in the Mediation.\nIf the parties cannot resolve any dispute under these Airdrop Terms of Use and T&C Terms, for any reason, including, but not limited to, the failure of either party to agree to enter into mediation or agree to any settlement proposed by the mediator within 20 business days after the first date of the mediation, either party may make a claim in accordance with this clause and subject to the exclusive jurisdiction of the courts of England and Wales."}},"/tonkeeper/signer":{"title":"Signer","data":{"":"This page is a draft.\nOpen source secure mobile app for cold managing TON crypto wallet keys and signing blockchain transactions, designed to operate completely offline.Signer GitHub repo","features#Features":"Operates offline, compatible with Tonkeeper.\nSupports multiple keys.\nEnables transaction signing directly within safe area in SignerApp.\nEncrypts keys using your personal password for maximum security.","privacy-friendly#Privacy-friendly":"No internet access required, ensuring no data is upload.\nDoes not collect analytics or log user activity.\nEncrypts all secure data with your password, making it accessible only to you.\nPrivate keys never leave app, exported, copied, etc.\nOur developers cannot access your data.","secure#Secure":"The details of the security implementation are described here.","decoded-payload-preview#Decoded payload preview":"Allows you to decode and view the contents of a signed payload for the following cases:\nTON transfer with comment\nNFT transfer\nJetton transfer","interfaces#Interfaces":"The app works offline and can be on the same device as other apps or on a separate device.Receiving and sending data can be done via:\nQR codes\nDeeplinks","protocol#Protocol":"","sign-the-transaction-from-tonkeeper--signer#Sign the transaction (from Tonkeeper → Signer)":"Scheme: tonsign://v1/Parameters marked with an asterisk (*) are required.\nParameter\tDescription\tDefault value\tnetwork\tNetwork (ton, btc, tron20)\tton\tpk*\tWallet public key in hex (to immediately select the one you need in Signer)\t\tbody*\tSignature data in hex format. Send only body payload.\t\treturn\tURL for returning a signed transaction. more details below. Its default search/query url param.\tSigner shows QR code if not specified.\tv\tWallet version TON (v3r1/v3r2/v4r2/v5r1). Using only for UI\tv4r2\tseqno\t\t1\tnetwork\tTon network version: Mainnet = -239 Testnet = -3\t-239\t\nExample link: tonsign://v1/?network=ton&pk=&body=\nThis URL must be included in the QR code.","parameter-return#Parameter return":"Used to direct the user back to the requester with a signed transaction.Case: The user on the device opens wallet.tonkeeper.com and signs the transaction via Signer on the same device, he needs to be redirected back to the browser to the specified URL with an additional parameter boc. For example, return back to https://wallet.tonkeeper.com/?boc=hex.Example link: tonsign://v1/?network=ton&pk=&body=&return=https://wallet.tonkeeper.com/","return-signed-transaction-signer--tonkeeper#Return signed transaction (Signer → Tonkeeper)":"Scheme: tonkeeper://publish or https://app.tonkeeper.com/publish if opening by click/direct redirect (mainly needed for iOS)Web wallet use return for interaction on one device. Doesn't need a special scheme.Parameters marked with an asterisk (*) are required.\nParameter\tDescription\tsign*\tSignature of transaction hash in hex. (Result from: PrivateKey.sign(body.hash) )\t\nExample link: tonkeeper://publish?sign=\nThis URL must be included in the QR code.","pairing-signer--tonkeeper#Pairing (Signer → Tonkeeper)":"Scheme: tonkeeper://signer/link or https://app.tonkeeper.com/signer/link if opening by click/direct redirection (mainly needed for iOS). For web: https://wallet.tonkeeper.com/signer/link.Parameters marked with an asterisk (*) are required.\nParameter\tDescription\tDefault value\tnetwork\tNetwork (ton, btc, tron20)\tton\tpk*\tWallet public key in hex\t\tname\tKey name as url safe string (substitute in the Tonkeeper name input field)\t\tlocal\tWe pass true only to open Tonkeeper locally. This way we can determine that Tonkeeper is opened directly from Signer.\t\t\nExample link for app: tonkeeper://signer/link?pk=&name=MyKey\nExample link for web: https://wallet.tonkeeper.com/signer/link?pk=&name=MyKey\nThis URL must be included in the QR code.","qr-code-specification#QR code specification":"Everything in the QR code should always begin with a diagram (tonsign:// or tonkeeper://). This is necessary for proper processing of animation codes.QR codes for Android:\nCorrection level: M\nMax size: 256 characters\nDuration: 100ms per QR-code\nThe camera in Android normally reads this size of each code at this speed.","interaction-diagram#Interaction diagram":"The follow diagrams shows the diagrams for connecting and signing a transaction via signer mobile application:","deeplink-linking#Deeplink linking":"","qr-code-linking#QR Code linking":"","deeplink-signing#Deeplink signing":"","qr-code-signing#QR code signing":""}},"/tonapi/rest-api/extra-currency":{"title":"Extra Currency","data":{"":"Extra Currency in TON is an additional cryptocurrency similar to tokens but with several key differences in its creation and management. It is a native part of the TON blockchain and is integrated directly into its core configuration.Unlike traditional tokens, which are created and controlled through smart contracts, extra currency is defined at the network configuration level. These tokens are identified by unique 32-bit identifiers and are embedded in every internal message and account balance, ensuring transparent management of their issuance and circulation.For more information, please refer to the official documentation.","operations#Operations":""}}}